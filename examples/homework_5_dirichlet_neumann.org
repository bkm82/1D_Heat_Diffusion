#+TITLE: Homework 5
#+AUTHOR: Bray Moll
#+OPTIONS: toc:nil
#+SETUPFILE: ~/masters/bray-standard-latex-export.org


* 1) Left Dirchlet, Right neuimann


** Problem Setup
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  import pandas as pd
  from solver import solver
  from solver import mesher
  import plotnine as pn
 #+END_SRC

#+RESULTS:

In this problem we are using a spatial domain
$x \epsilon [0,1]$

We are using an intial condition
$T(x, t=0) = 0^\circ C$
a left dirichlet boundary
$T(0, t) = 50^\circ C$

On the right size we will apply a zero Neuiman Boundary Condition
$\frac{\partial T}{\partial x} (x = 1, t) = 0$

We will set the thermal diffusivity to
$\alpha ^2 = 0.0001 \frac{m^2}{s}$

Additionally we can set paramaters of interest such as the maximum, the number of cells as well as the mesh type. The only difference for the mesh type in 1d is if the node is directly on the boundarys (as would be seen in the finite difference) or if the edge cell face is on the boundary. The mesher module can be used to set a mesh and apply boundary conditions (see the mesher pdf for the applicable code). *Note I created a function to assist in creating a mesh specific to this problem
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  def create_mesh(n_cells, mesh_type):
      mesh = mesher.create_1Dmesh(x=[0, 1], n_cells=n_cells, mesh_type=mesh_type)
      mesh.set_cell_temperature(0)  # set initial conditions to 0 celcicus
      mesh.set_dirichlet_boundary("left", 50)  # Left to 50 c
      mesh.set_neumann_boundary("right")
      mesh.set_thermal_diffusivity(0.0001)  # m^2/s
      return mesh

  n_cells = 20
  time_max = 30000

#+END_SRC

#+RESULTS:
** Explicit method Unstable
As discussed in the lecture, for the explicit method, time steps that are too large (i.e $\Delta T > \frac{\Delta x^2}{2 \alpha^2}$ which with n=20 would be 11.3 seconds). We will start by handeling this case.

First create a solver object by using the solver module(see the solver code attached) with time paramaters, desired method, and a mesh. After the solver has been initalized the self.solve method(t final) can be called
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  explicit_solution_unstable = solver.solver_1d(
      mesh=create_mesh(n_cells, mesh_type),
      initial_time=0,
      time_step_size=15,
      method="explicit",
  )
  explicit_solution_unstable.solve(600)

#+END_SRC

#+RESULTS:

The data will be stored in a pandas data frame in the self.saved_data atribute. Showing the first 10 rows (which would be half the initial condition)


#+RESULTS:

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  print(explicit_solution_unstable.saved_data.head(10))

#+END_SRC

#+RESULTS:
#+begin_example
     method  time_step_size  time  x_cordinates  temperature
0  explicit              15     0      0.000000         50.0
1  explicit              15     0      0.052632          0.0
2  explicit              15     0      0.105263          0.0
3  explicit              15     0      0.157895          0.0
4  explicit              15     0      0.210526          0.0
5  explicit              15     0      0.263158          0.0
6  explicit              15     0      0.315789          0.0
7  explicit              15     0      0.368421          0.0
8  explicit              15     0      0.421053          0.0
9  explicit              15     0      0.473684          0.0
#+end_example


The data can be plotted using a plotting tool of choise. I first filter the results to the time points of interest and then plot the data using plot nine

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results graphics file :file explicit_unstable.png :exports both :session Python-Session
  time_points = [0,15,30,60,600]
  plot_data_filterd_bool = explicit_solution_unstable.saved_data["time"].isin(time_points)
  plot_data_filtered = explicit_solution_unstable.saved_data[plot_data_filterd_bool]

  plot = (
      pn.ggplot(
          plot_data_filtered,
          pn.aes("x_cordinates", "temperature", color="factor(time)"),
      )
      + pn.geom_line()
      + pn.geom_point()
      + pn.facet_grid("method~time_step_size")


    )
  plot.save("explicit_unstable.png")

#+END_SRC

#+RESULTS:
[[file:explicit_unstable.png]]

As demonstrated in this example, when our  $\Delta t > \frac{\Delta x ^2}{2 \alpha ^2}$ the explicit method will demonstrate numerical instability that continues to grow exponentially with each time step.




** Finite Difference Discritization
Taking the same approach can be done for the explicit t =1 as well as both t = 1 and t = 15 using the implicit method.
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results graphics file :file finite_difference.png :exports both :session Python-Session
  mesh_type = "finite_difference"
  explicit_solution_stable = solver.solver_1d(
      mesh=create_mesh(n_cells, mesh_type),
      initial_time=0,
      time_step_size=1,
      method="explicit",
  )
  explicit_solution_stable.solve(time_max)

  implicit_solution_15sec = solver.solver_1d(
      mesh=create_mesh(n_cells, mesh_type),
      initial_time=0,
      time_step_size=15,
      method="implicit",
  )
  implicit_solution_15sec.solve(time_max)

  implicit_solution_1sec = solver.solver_1d(
      mesh=create_mesh(n_cells, mesh_type),
      initial_time=0,
      time_step_size=1,
      method="implicit",
  )
  implicit_solution_1sec.solve(time_max)

  plot_data_finite_difference = pd.concat(
      [

          explicit_solution_stable.saved_data,
          implicit_solution_15sec.saved_data,
          implicit_solution_1sec.saved_data,
      ]
  )
  time_points = [
      0,
      15,
      30,
      60,
      600,
      3600,
      time_max,
  ]  # time points that you want to plot

  plot_data_filterd_bool = plot_data_finite_difference["time"].isin(time_points)
  plot_data_filtered = plot_data_finite_difference[plot_data_filterd_bool]

  plot = (
      pn.ggplot(
          plot_data_filtered,
          pn.aes("x_cordinates", "temperature", color="factor(time)"),
      )
      + pn.geom_line()
      + pn.geom_point()
      + pn.facet_grid("method~time_step_size")

  )

  plot.save("finite_difference.png")


#+END_SRC

#+RESULTS:
[[file:finite_difference.png]]

*Note, I left the unstable 15 second explicit solution presented above out of this figure deliberatly as it can cause the y-scale to grow exponentially, obscuring the results.
\newpage

** Finite Volume Discritization

Alternatly, the finite pvolume discritization can be used. Both methods produce similar results, however of note is the far left boundary. The finite difference method has a point directly at the center whereas the finite volume would have a point $\frac{\Delta x}{2}$ away, so the temperature will not be intially set and held exactly to  $50^\circ C$
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
mesh_type = "finite_volume"
#+END_SRC

#+RESULTS:


#+BEGIN_SRC python :results graphics file :file finite_volume.png :exports results :session Python-Session
  mesh_type = "finite_volume"

  explicit_solution_stable = solver.solver_1d(
      mesh=create_mesh(n_cells, mesh_type),
      initial_time=0,
      time_step_size=1,
      method="explicit",
  )
  explicit_solution_stable.solve(time_max)

  implicit_solution_15sec = solver.solver_1d(
      mesh=create_mesh(n_cells, mesh_type),
      initial_time=0,
      time_step_size=15,
      method="implicit",
  )
  implicit_solution_15sec.solve(time_max)

  implicit_solution_1sec = solver.solver_1d(
      mesh=create_mesh(n_cells, mesh_type),
      initial_time=0,
      time_step_size=1,
      method="implicit",
  )
  implicit_solution_1sec.solve(time_max)

  plot_data_finite_volume = pd.concat(
      [

          explicit_solution_stable.saved_data,
          implicit_solution_15sec.saved_data,
          implicit_solution_1sec.saved_data,
      ]
  )
  time_points = [
      0,
      15,
      30,
      60,
      600,
      3600,
      time_max,
  ]  # time points that you want to plot

  plot_data_filterd_bool = plot_data_finite_volume["time"].isin(time_points)
  plot_data_filtered = plot_data_finite_volume[plot_data_filterd_bool]

  plot = (
      pn.ggplot(
          plot_data_filtered,
          pn.aes("x_cordinates", "temperature", color="factor(time)"),
      )
      + pn.geom_line()
      + pn.geom_point()
      + pn.facet_grid("method~time_step_size")

  )

  plot.save("finite_volume.png")


#+END_SRC

#+RESULTS:
[[file:finite_volume.png]]


* References

This work was produced using an object oriented approach discussed and recomended in Scientific Software Design The Object-Oriented Way by Damian Rouson, Jim Xia, and Xiaofeng Xu.

Additionally, the approach utilized was influenced by my own previous notes from MD362 Numerical analysis taught by Dr John M Neuberger.

Finnaly preparing the code for this assignmet ChatGPT was utilized as a reasource to assist in implementing the code to assist in writing the correct python sintax. (i.e. for example i had inputed the query "In MATLAB i can create an array using linspace(x1,x2), how can i do that in python". The resulting recomendation to utilize the numpy module for the numpy.linspace() function was utilized.

Chat GPT is a "Natural Language Processer" which at its core is a mathmatical model that calculates the probability of a given response $\textbf{Y} = f(\textbf{X})$ and then selecting the responce with the highest probability. Machine learning models are trained to fit a generalized non-linear model by taking the input paramaters and multiplying them by a weight function (i.e x1 * w1 = b1). In the case of a deep nural network the response of the first equation will be acted on my a non linear operator (i.e. b1 = b1 if b1>0, else 0) and then multiplied by another weight function. This can be repeated multiple times in varying configurations until the response was predicted.

To train the model a gradient decent method is often utilized, where a training data with known responses is used to fit the weight paramaters. The model starts with random weights, predicts the response and compairs each result with the actual response utilizing a loss function (such as mean squared error) The loss is minimized by using gradient decent in which the weigths are updated by taking a step in the direction of steepest decent.

Because Chat GPT is predicting the next most posible phrase, it can result in responses that sound confident, but are not correct. Each line of code was tested (see below in the Test Mesher section) Note: The information in this description was developed from my own notes from CS499 Deep Learning taught by Dr. Toby Hocking

* How my code works
 My code has two modules, a mesher and a solver and then a test mesher and a test solver

*** Mesher
The responsability of the mesher is to discritze the domain and apply the inital conditions. The mesher creates an object that stores an array for each points x cordinate its current temperature. The object also stores the thermal diffusivity a differentiation matrix (which starts as the laplacian matrix but is modified based on the boundary conditions applied) and a boundary condition array.

*** Solver
The responsability of the solver was to take the mesh object and calculate the temperature at the next time step (utilizing either the explicit or implicit derivation) It is worth noting, that this could be done without any knowledge of the discritization approach (finite volume or finite difference) so long as the differentiation matrix was provided. The solver responsible for storing the new temperature at each point for each time step in an object atribute.

*** Test Mesher / Test Solver
This code was developed using test driven developemnt, in which i started off by writing a test describing what i wanted to be true. For example i wanted calling create1Dmesh( x = [0,1], n_cells =5, mesh_type= 'finite_difference') to store an an array [0, .25, .5, .75, 1] as an object atribute. So i wrote a test that asserted that was the case
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC Python :results code :exports both :session Python-session
    mesh = create1Dmesh(x = [0,1], n_cells =5, mesh_type = 'finite difference)"
    assert (mesh.x_cellcenter = np.array([0, .25, .5, .75, 1])
#+END_SRC

Initially the code would fail the test (as it was a feature of the code that was not yet implemnted). After updating the code to implement the test was re-executed and a passing result indicated the program was behaving in my intended behavior. This pattern was repeated with the first test left in place, continuously re-verifying that a new change did not unintentionally modify the codes expected behavior. The python module pytest was utilized to help organize and run the test cases.

* Github
The code utilized in this assinment can be found on my git hub.

https://github.com/bkm82/1D_Heat_Diffusion
