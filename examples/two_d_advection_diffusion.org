#+TITLE: Code Project
#+AUTHOR: Bray Moll
#+OPTIONS: toc:nil
#+SETUPFILE: ~/masters/bray-standard-latex-export.org
#+BIBLIOGRAPHY: citations.bib

* Problem Description
** Integral Equation
This problem considers the 2 dimensional advection diffusion equation, which in its integral form can be written as
\begin{equation}
\frac{d}{dt} \int _\Omega \phi  d\Omega = - \int _S \phi \textbf{V} \cdot \textbf{n} dS  \int _S \alpha \nabla \phi \cdot \textbf{n} dS + \int _\Omega Q d\Omega
\end{equation}

** Descriptions
Part 1 condsiders the steady state problem with no advection or generation terms for a thin water column with the spatial domain of  $x \epsilon(0,5m)$ and $y \epsilon(0,1m)$ with a dirichlet boundary conditions of $30^{\circ} c$ on the left, bottom, and top surface and a neumann boundary condition of $q = 10 \frac{W}{m^2}$ on the top surface

Part 2 condsiders the same formulation as part 1 with an added source term $Q = 50e^{-(x-\frac{L}{2})^2}$

Part 3 considers the unsteady case of part 1, starting from an initial condition of $T(0,x,y) = 30^{\circ} c$ until a steady state is achieved

Part 4 considers the advection-diffusion problem with a left dirichelet boundary condition of $50 ^{\circ} c$, for three constant velocities $\textbf{V} = [1,0], [10,0], [100,0] m/s$
** Discritized Equations
The first term of equation 1 discritized on a cartesian structured grid by approximating the volumetric inegral's average as being its center point and discritizing the time derivative using a forward discritization.
\begin{equation}
\frac{d}{d t} \int _\Omega  \phi d\Omega = \frac{d}{d t} \bar{\phi}\Delta x \Delta y \approx \frac{d}{d t} \phi _i\Delta x \Delta y \approx \frac{\phi^{n+1} _i - \phi ^ n _i}{\Delta t} \Delta x \Delta y + O(\Delta t)
\end{equation}

Due to the velocitys all being in the positive x direction, the second term can be discritized using an upwind discritization.
\begin{equation}
 -\int _S \phi \textbf{V} \cdot \textbf{n} dS   \approx u_x(\phi_L - \phi _i) \Delta y +O(\Delta x , \Delta t)
\end{equation}
where u_x is the velocity magnitude in the x direction and $\phi _W$ coresponds to value of phi for the cell next to the current cell in the the west cardinal dircetion. Of note, the $\Delta x$ discritization here will make the entire equation 1st order accurate spatial discritization. Note: The convection of refering to the cells surrounding the current cell as N = North, E = East, W = West, S = South
and the lowercase equivalent refering to the respective face intersections between will be used throuhout this report)

the third diffusive flux term can be discritized using the central difference. Assuming a constant diffusivity paramater this results in

\begin{equation}
 \int _S \alpha \nabla \phi \cdot \textbf{n} dS \approx \alpha \frac{\phi _L -2 \phi _i +\phi _R}{\Delta x} \Delta y + \alpha \frac{\phi _S -2 \phi _i +\phi _N}{\Delta y} \Delta x + O(\Delta x^2 ,\Delta y^2)
\end{equation}

The last source term can again be approximated as the value at its mid point

\begin{equation}
\int _\Omega Q d\Omega \approx Q_i\Delta x \Delta y
\end{equation}

Combining the equations 2 - 5 and deviding both sided by $\Delta x \Delta y$ and multipying the source term (given in units of $\frac{W}{m^2}$) by $\frac{\alpha}{k}$ results in the final discritized equation
\begin{equation}
\frac{\phi^{n+1} _i - \phi ^ n _i}{\Delta t} = \frac{u_x(\phi_L - \phi _i)}{\Delta x} + \alpha \frac{\phi _L -2 \phi _i +\phi _R}{\Delta x ^2} + \alpha \frac{\phi _S -2 \phi _i +\phi _N}{\Delta y^2} + \ Q_i \frac{\alpha}{k} +O(\Delta t, \Delta x, \Delta y)
\end{equation}

Finally, the source term was given in

** Boundary Conditions
For the boundary conditions, we can modify equation 6 on the boundaries using the ghost cell approach using the known quantities. Shown here for the left dirichlet boundaries
\begin{equation}
\frac{\phi _L+ \phi _i}{2} = T_{left}
\end{equation}
allows solving for the dirichlet equations on the boundaries
\begin{equation}
\phi _L = 2T_{left}-\phi _i
\end{equation}
Simillarly for the right
\begin{equation}
\phi _R = 2T_{right}-\phi _i
\end{equation}
and bottom boundaries
\begin{equation}
\phi _S = 2T_{bottom}-\phi _i
\end{equation}
The neumann boundary can be determined from the flux term
\begin{equation}
q = k \frac{\delta T}{\delta y} \approx k \frac{\phi _N - \phi _i}{\Delta y}
\end{equation}
where k is the materials thermal conductivity.
Solving for $\phi _n$
\begin{equation}
\phi _N = \frac{q \Delta y}{k} +\phi _i
\end{equation}


\newpage
* Problem Constants
Based on the problem description, at atmospheric pressure the thermal diffusivity ranges from $0.155 *10^{-6} \frac{m^2}{s}$ at 50 degrees celcius, to $0.143 * 10^ {-6} \frac{m^2}{s}$ at 20 degrees celsius. A constant thermal diffusivity of $0.146 * 10^{-6} /frac{m^2}{s}$ for water at standard temperature and pressure (25 degrees celcius at atmospheric pressure) was used for this project as the error introduced due to this symplifying assumption was determined to be acceptable [cite:@Water_Diffusion_EngineeringToolbox]

The water thermal conductivity taken to be a constant at $0.456 \frac{W}{mK}$ again coresponding to a temperature of 25 degrees celcius. [cite:@Water_Conductivity_EngineeringToolBox]

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  from solver.cartesian_mesh import CartesianMesh
  from solver.solver import Solver
  from solver.utilities import EnergyBalance
  from solver.mesher import linear_convection_mesh
  from matplotlib import pyplot as plt
  import numpy as np
  import logging
  import math

  #create logging configuration
  logger = logging.getLogger(__name__)
  logger.setLevel(logging.DEBUG)

  console_handler = logging.StreamHandler()
  console_handler.setLevel(logging.DEBUG)
  formatter = logging.Formatter(
    "%(message)s",
  )
  console_handler.setFormatter(formatter)
  logger.addHandler(console_handler)

  #Define a various mesh sizes with non equal cell widths and heights
  mesh_size_dict = {
     "course":(5,2),
     "medium": (20,8),
     "fine":(100,10),
     "ultra_fine":(200,50)
  }
  # Define Problem constants
  x_range = (0,5)
  y_range = (0,1)
  mesh_type = "finite_volume"
  conductivity = 0.456 ## W/mK
  diffusivity = 0.146*10**(-6) #m^2/s
  temp_left = 30  ## decrees celcius
  temp_right = 30 ## degrees celcius
  temp_bottom = 30 # degrees celsius
  top_flux = -10 #W/m

  # Create a function that creates the mesh
  def create_mesh(
          x_cells = 80,
          y_cells = 12,
          temp_left = temp_left,
          temp_right = temp_right,
          temp_bottom = temp_bottom,
          top_flux = top_flux,
          conductivity = conductivity,
          diffusivity = diffusivity
  ):
      mesh = CartesianMesh(
          dimensions=2,
          n_cells=[x_cells, y_cells],
          cordinates=[x_range, y_range],
          mesh_type= mesh_type,
          conductivity = conductivity,
          diffusivity = diffusivity
      )

      mesh.set_dirichlet_boundary(side="left", phi=temp_left)
      mesh.set_dirichlet_boundary(side="right", phi=temp_right)
      mesh.set_dirichlet_boundary(side="bottom", phi=temp_bottom)
      mesh.set_neumann_boundary(side="top", flux = top_flux/conductivity)
      return(mesh)
 #+END_SRC

 #+RESULTS:

* Part 1 Steady State
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  #Define a various mesh sizes with non equal cell widths and heights
  mesh_dict = {}
  energy_balance_dict = {}
  for mesh_size , cells in mesh_size_dict.items():
      x_cells , y_cells  = cells

      mesh_dict[mesh_size] = create_mesh(x_cells = x_cells,y_cells=y_cells)
      # Solve the steady Case
      Solver(mesh = mesh_dict[mesh_size]).solve_steady()
      energy_balance_dict[mesh_size] = EnergyBalance(mesh = mesh_dict[mesh_size])
      logger.info(f"\n Mesh Size:{mesh_size}")
      total_flux = energy_balance_dict[mesh_size].flux("all")
#+END_SRC

#+RESULTS:
#+begin_example

 Mesh Size:course

 Mesh Size:course
solver.utilities:INFO:flux:
 Left Flux: 5.984599731767105 W
 Right Flux: 5.984599731767105 W
 Bottom Flux: 38.03080053646583 W
 Generation: 0.0 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 8.131861707906003e-28 W
 Flux leaving boundarys: 4.440892098500626e-14W
 Total Flux: 4.440892098500626e-14

 Mesh Size:medium

 Mesh Size:medium
solver.utilities:INFO:flux:
 Left Flux: 7.330052111172102 W
 Right Flux: 7.330052111172095 W
 Bottom Flux: 35.339895777655755 W
 Generation: 0.0 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 2.2277109653610886e-26 W
 Flux leaving boundarys: -5.684341886080802e-14W
 Total Flux: -5.684341886080802e-14

 Mesh Size:fine

 Mesh Size:fine
solver.utilities:INFO:flux:
 Left Flux: 7.410898164506065 W
 Right Flux: 7.4108981645061895 W
 Bottom Flux: 35.178203670991046 W
 Generation: 0.0 W
 Top Flux: -49.99999999999999 W
 Cell Sum Squared Error: 1.7166707559454444e-25 W
 Flux leaving boundarys: 3.304023721284466e-12W
 Total Flux: 3.304023721284466e-12

 Mesh Size:ultra_fine

 Mesh Size:ultra_fine
solver.utilities:INFO:flux:
 Left Flux: 7.417294624355647 W
 Right Flux: 7.417294624356283 W
 Bottom Flux: 35.165410751328 W
 Generation: 0.0 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 1.6155439387848486e-24 W
 Flux leaving boundarys: 3.991829089500243e-11W
 Total Flux: 3.991829089500243e-11
#+end_example

Due to the finite volume scheme, the total flux error and the sum of each cells squared error is relativly independent of mesh size. The overall error increases slightly with the higher number of points due to the numerical round off error present with the higher number of calcualtions.

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results graphics file :file steady.png :exports results :session Python-Session
  fig, ax = plt.subplots(len(mesh_dict), figsize= (10,12))
  i = 0
  for  mesh_size, mesh in mesh_dict.items():

      x_cords = mesh.grid["x_grid"].cell_cordinates
      y_cords = mesh.grid["y_grid"].cell_cordinates
      logger.debug(x_cords)
      xv, yv = np.meshgrid(x_cords, y_cords)
      axis = plt.subplot(len(mesh_dict),1,i+1)
      axis.set_title(mesh_size)
      steady = axis.pcolormesh(xv, yv, mesh.phi.get_phi())

      i = i +1

      fig.colorbar(steady, label = "temperature (celcius)")
  plt.savefig("steady.png")


#+END_SRC

#+RESULTS:
[[file:steady.png]]

* Part 2: With Generation
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  generation_mesh_dict = {}
  generation_energy_balance_dict = {}
  def gen_function (x, y):
      return(0*y+ 50*np.exp(-(x-2.5)**2))
  for mesh_size , cells in mesh_size_dict.items():
      x_cells , y_cells  = cells

      #Create the mesh
      generation_mesh_dict[mesh_size] = create_mesh(x_cells = x_cells,y_cells=y_cells)

      #Add the generation function
      generation_mesh_dict[mesh_size].set_generation(function = gen_function)

      # Solve the steady Case with generation
      Solver(mesh = generation_mesh_dict[mesh_size]).solve_steady()
      generation_energy_balance_dict[mesh_size] = EnergyBalance(mesh = generation_mesh_dict[mesh_size])
      logger.info(f"\n Mesh Size:{mesh_size}")
      total_flux = generation_energy_balance_dict[mesh_size].flux("all")

#+END_SRC

#+RESULTS:
#+begin_example

 Mesh Size:course

 Mesh Size:course

 Mesh Size:course
solver.utilities:INFO:flux:
 Left Flux: 3.050929235793739 W
 Right Flux: 3.050929235793736 W
 Bottom Flux: -44.721366477605116 W
 Generation: 88.61950800601765 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 1.3769936879182083e-27 W
 Flux leaving boundarys: -88.61950800601764W
 Total Flux: 1.9984014443252818e-14

 Mesh Size:medium

 Mesh Size:medium

 Mesh Size:medium
solver.utilities:INFO:flux:
 Left Flux: 4.701073325592375 W
 Right Flux: 4.70107332559235 W
 Bottom Flux: -47.991201972823 W
 Generation: 88.58905532163828 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 2.551527219976484e-26 W
 Flux leaving boundarys: -88.58905532163827W
 Total Flux: 1.2878587085651816e-14

 Mesh Size:fine

 Mesh Size:fine

 Mesh Size:fine
solver.utilities:INFO:flux:
 Left Flux: 4.785512273955572 W
 Right Flux: 4.785512273955726 W
 Bottom Flux: -48.157752314938016 W
 Generation: 88.58672776703278 W
 Top Flux: -49.99999999999999 W
 Cell Sum Squared Error: 3.4356761443066776e-25 W
 Flux leaving boundarys: -88.58672776702672W
 Total Flux: 6.0751403907488566e-12

 Mesh Size:ultra_fine

 Mesh Size:ultra_fine

 Mesh Size:ultra_fine
solver.utilities:INFO:flux:
 Left Flux: 4.804574739708152 W
 Right Flux: 4.804574739708852 W
 Bottom Flux: -48.195801968524805 W
 Generation: 88.58665248917005 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 3.482364056824771e-24 W
 Flux leaving boundarys: -88.5866524891078W
 Total Flux: 6.225775450729998e-11
#+end_example

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results graphics file :file generation.png :exports results :session Python-Session
  fig, ax = plt.subplots(len(generation_mesh_dict), figsize= (10,12))
  i = 0
  for  mesh_size, mesh in generation_mesh_dict.items():

      x_cords = mesh.grid["x_grid"].cell_cordinates
      y_cords = mesh.grid["y_grid"].cell_cordinates
      logger.debug(x_cords)
      xv, yv = np.meshgrid(x_cords, y_cords)
      axis = plt.subplot(len(generation_mesh_dict),1,i+1)
      axis.set_title(mesh_size)
      steady = axis.pcolormesh(xv, yv, mesh.phi.get_phi())

      i = i +1


      fig.colorbar(steady, label = "temperature (celcius)")
  plt.savefig("generation.png")


#+END_SRC

#+RESULTS:
[[file:generation.png]]


In the generation case you can see the overall energy balance still holds for the finite volume discritization regardless of discritization size. As expected, the energy generated is balanced by the energy leaving the control volume. The source term was strong enough to have a flux out of the control volume on the 4 dirichilet boundaries. Of note in this case is that even though the generation term was constant in the Y axis, the temperature distribution is shifted towards the upper bound due to the fixed flux of $10 W/m$ being less than the bottom flux (which is ~ $20 \frac{W}{m}$ but would not be constant across the boundary. Also of note, the maximum temperature reached was ~ 90 degrees celcius which is approaching a range where, depending on the application, the assumption of a constant thermal conductivity could be introducing a non-negligable amound of error into calculating the solution.

* Part 3: Transient

To obtain a rough estimate the time to perform the simulation we can use the formula
\begin{equation*}
\frac{Water Mass * (T _{final} - T _{start}) * Specific Heat}{Cooling Rate}
\end{equation*}

Aproximating the cooling rate as being the average of its starting rate (50W from the top) and 0W (steady state) = 25W.

The temperatures are 30 celcius and the average temperature seen in the steady state case.
At these temperatures, the isobaric and isochoric specific heats are aproximatly equivalent at 4.1379 kJ/kgK [cite:@Water_Specific_Heat_EngineeringToolBox]

\begin{equation*}
\frac{5 (m) * 1 (m) * \frac{1000 kg}{m^3} * (T _{final} -30 )K * 41379 \frac{J}{kgK}}{-25 \frac{J}{s m^2} } =
\end{equation*}
where L is the lenght into the page
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session

  average_final_temp =np.mean(mesh_dict["fine"].phi.get_phi())
  time_estimate = ((5*1)*1000*(average_final_temp - 30)*41379)/(-25)
  logger.info(f"Time Estimate: {time_estimate}s")
#+END_SRC

#+RESULTS:
: Time Estimate: 67171960.47650723s

This time estimate can also be obtained using the einstein's approximation equations [cite:@Diffusion_Time_Calculator]

\begin{equation}
 t \approx \frac{x ^2}{alpha} = \frac{1 m^2}{2* 0.146 *10^{-6}\frac{m^2}{s}} \approx 0.2 *10 ^6 seconds
\end{equation}

This shows that the time scales of interest are on the order of 1 million seconds. Recalling that for an explicit solver we need
\begin{equation*}
\Delta t \le \frac{\Delta x ^2}{2\alpha ^2}
\end{equation*}
With a realistic desired discritization size of $\Delta x = 0.01$ and our thermal diffusivity of $0.146 *10 ^{-6} \frac{m^2}{s}$ an Explicit solver would require a time step size on the order of 100 seconds which would require roughly 10^4 time steps for the finer meshes.For this reason an implicit solver was chosen.

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  #Define a various mesh sizes with non equal cell widths and heights

  # transient_mesh = CartesianMesh(
  #   dimensions = 2,
  #   n_cells = [80, 12],
  #   cordinates = [(0,5), (0,1)],
  #   mesh_type = "finite_volume",
  #   conductivity = conductivity,
  #   diffusivity = diffusivity
  # )

  # transient_mesh.set_dirichlet_boundary(side="left", phi=temp_left)
  # transient_mesh.set_dirichlet_boundary(side="right", phi=temp_left)
  # transient_mesh.set_dirichlet_boundary(side="bottom", phi=temp_left)
  # transient_mesh.set_neumann_boundary(side="top", flux=-10/conductivity)
  transient_mesh = create_mesh()
  #Set the initial condition
  transient_mesh.phi.set_phi(30)
  average_final_temp =np.mean(mesh_dict["fine"].phi.get_phi())
  logger.debug(f"Initial phi {transient_mesh.phi.get_phi()}")
  logger.info(f"Steady Average Temerpature phi {average_final_temp}")

  #Create the implicit solver
  transient_solver = Solver(
      mesh = transient_mesh,
      method = "implicit",
      time_step_size = 10000
  )

  record_time_step_time = 500000
  max_time = 50000000
  #transient_dict[0] = transient_mesh.phi.get_phi()
  transient_list = [{0:transient_mesh.phi.get_phi()}]
  time = 0
  while time < max_time:
      time = transient_solver.current_time
      transient_solver.solve(
          t_initial = time,
          t_final = time + record_time_step_time)
      current_average_temp = np.mean(transient_mesh.phi.get_phi())
      error = (
          current_average_temp - average_final_temp) / (average_final_temp) *100
      logger.info(f"Time : {transient_solver.current_time} s, Average Temp {current_average_temp}, error: {round(error,2)}%")
      #transient_dict[time+record_time_step_time] = transient_mesh.phi.get_phi()
      transient_list.append({time:transient_mesh.phi.get_phi()})
      if error < 0.1:
          break

      if time >= max_time:
          logger.warning(f"The max time was reached without convergance")

  logger.debug(f"Phi{transient_mesh.phi.get_phi()}")



#+END_SRC

#+RESULTS:
#+begin_example
Initial phi [[30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]]
Initial phi [[30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]]
Initial phi [[30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]
 [30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.
  30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30. 30.]]
Steady Average Temerpature phi 21.883327234042966
Steady Average Temerpature phi 21.883327234042966
Steady Average Temerpature phi 21.883327234042966
Time : 500000 s, Average Temp 28.534248252244552, error: 30.39%
Time : 500000 s, Average Temp 28.534248252244552, error: 30.39%
Time : 500000 s, Average Temp 28.534248252244552, error: 30.39%
Time : 1000000 s, Average Temp 27.269165054885367, error: 24.61%
Time : 1000000 s, Average Temp 27.269165054885367, error: 24.61%
Time : 1000000 s, Average Temp 27.269165054885367, error: 24.61%
Time : 1500000 s, Average Temp 26.23175581634937, error: 19.87%
Time : 1500000 s, Average Temp 26.23175581634937, error: 19.87%
Time : 1500000 s, Average Temp 26.23175581634937, error: 19.87%
Time : 2000000 s, Average Temp 25.395478723705615, error: 16.05%
Time : 2000000 s, Average Temp 25.395478723705615, error: 16.05%
Time : 2000000 s, Average Temp 25.395478723705615, error: 16.05%
Time : 2500000 s, Average Temp 24.722659640722476, error: 12.97%
Time : 2500000 s, Average Temp 24.722659640722476, error: 12.97%
Time : 2500000 s, Average Temp 24.722659640722476, error: 12.97%
Time : 3000000 s, Average Temp 24.180657036717903, error: 10.5%
Time : 3000000 s, Average Temp 24.180657036717903, error: 10.5%
Time : 3000000 s, Average Temp 24.180657036717903, error: 10.5%
Time : 3500000 s, Average Temp 23.743325732280947, error: 8.5%
Time : 3500000 s, Average Temp 23.743325732280947, error: 8.5%
Time : 3500000 s, Average Temp 23.743325732280947, error: 8.5%
Time : 4000000 s, Average Temp 23.389959610905308, error: 6.88%
Time : 4000000 s, Average Temp 23.389959610905308, error: 6.88%
Time : 4000000 s, Average Temp 23.389959610905308, error: 6.88%
Time : 4500000 s, Average Temp 23.104121487481745, error: 5.58%
Time : 4500000 s, Average Temp 23.104121487481745, error: 5.58%
Time : 4500000 s, Average Temp 23.104121487481745, error: 5.58%
Time : 5000000 s, Average Temp 22.87270605253552, error: 4.52%
Time : 5000000 s, Average Temp 22.87270605253552, error: 4.52%
Time : 5000000 s, Average Temp 22.87270605253552, error: 4.52%
Time : 5500000 s, Average Temp 22.68522371614965, error: 3.66%
Time : 5500000 s, Average Temp 22.68522371614965, error: 3.66%
Time : 5500000 s, Average Temp 22.68522371614965, error: 3.66%
Time : 6000000 s, Average Temp 22.53325240611481, error: 2.97%
Time : 6000000 s, Average Temp 22.53325240611481, error: 2.97%
Time : 6000000 s, Average Temp 22.53325240611481, error: 2.97%
Time : 6500000 s, Average Temp 22.410013632245928, error: 2.41%
Time : 6500000 s, Average Temp 22.410013632245928, error: 2.41%
Time : 6500000 s, Average Temp 22.410013632245928, error: 2.41%
Time : 7000000 s, Average Temp 22.310041377172105, error: 1.95%
Time : 7000000 s, Average Temp 22.310041377172105, error: 1.95%
Time : 7000000 s, Average Temp 22.310041377172105, error: 1.95%
Time : 7500000 s, Average Temp 22.228921385736705, error: 1.58%
Time : 7500000 s, Average Temp 22.228921385736705, error: 1.58%
Time : 7500000 s, Average Temp 22.228921385736705, error: 1.58%
Time : 8000000 s, Average Temp 22.163084573943998, error: 1.28%
Time : 8000000 s, Average Temp 22.163084573943998, error: 1.28%
Time : 8000000 s, Average Temp 22.163084573943998, error: 1.28%
Time : 8500000 s, Average Temp 22.109642501915854, error: 1.03%
Time : 8500000 s, Average Temp 22.109642501915854, error: 1.03%
Time : 8500000 s, Average Temp 22.109642501915854, error: 1.03%
Time : 9000000 s, Average Temp 22.066255826486987, error: 0.84%
Time : 9000000 s, Average Temp 22.066255826486987, error: 0.84%
Time : 9000000 s, Average Temp 22.066255826486987, error: 0.84%
Time : 9500000 s, Average Temp 22.03102879055583, error: 0.67%
Time : 9500000 s, Average Temp 22.03102879055583, error: 0.67%
Time : 9500000 s, Average Temp 22.03102879055583, error: 0.67%
Time : 10000000 s, Average Temp 22.00242438222043, error: 0.54%
Time : 10000000 s, Average Temp 22.00242438222043, error: 0.54%
Time : 10000000 s, Average Temp 22.00242438222043, error: 0.54%
Time : 10500000 s, Average Temp 21.979195976480334, error: 0.44%
Time : 10500000 s, Average Temp 21.979195976480334, error: 0.44%
Time : 10500000 s, Average Temp 21.979195976480334, error: 0.44%
Time : 11000000 s, Average Temp 21.960332168022738, error: 0.35%
Time : 11000000 s, Average Temp 21.960332168022738, error: 0.35%
Time : 11000000 s, Average Temp 21.960332168022738, error: 0.35%
Time : 11500000 s, Average Temp 21.945012191732093, error: 0.28%
Time : 11500000 s, Average Temp 21.945012191732093, error: 0.28%
Time : 11500000 s, Average Temp 21.945012191732093, error: 0.28%
Time : 12000000 s, Average Temp 21.932569861394395, error: 0.23%
Time : 12000000 s, Average Temp 21.932569861394395, error: 0.23%
Time : 12000000 s, Average Temp 21.932569861394395, error: 0.23%
Time : 12500000 s, Average Temp 21.922464374620223, error: 0.18%
Time : 12500000 s, Average Temp 21.922464374620223, error: 0.18%
Time : 12500000 s, Average Temp 21.922464374620223, error: 0.18%
Time : 13000000 s, Average Temp 21.914256660859422, error: 0.14%
Time : 13000000 s, Average Temp 21.914256660859422, error: 0.14%
Time : 13000000 s, Average Temp 21.914256660859422, error: 0.14%
Time : 13500000 s, Average Temp 21.907590209855115, error: 0.11%
Time : 13500000 s, Average Temp 21.907590209855115, error: 0.11%
Time : 13500000 s, Average Temp 21.907590209855115, error: 0.11%
Time : 14000000 s, Average Temp 21.902175525179064, error: 0.09%
Time : 14000000 s, Average Temp 21.902175525179064, error: 0.09%
Time : 14000000 s, Average Temp 21.902175525179064, error: 0.09%
Phi[[27.77481248 24.54093288 22.04624851 20.05103261 18.41971107 17.06734951
  15.93622361 14.98461238 14.18096781 13.50064067 12.9239134  12.43474646
  12.01993761 11.66853266 11.37139682 11.12089314 10.91063513 10.73529299
  10.59043975 10.47242822 10.3782925  10.30566961 10.25273793 10.21817038
  10.2011005  10.2011005  10.21817038 10.25273793 10.30566961 10.3782925
  10.47242822 10.59043975 10.73529299 10.91063513 11.12089314 11.37139682
  11.66853266 12.01993761 12.43474646 12.9239134  13.50064067 14.18096781
  14.98461238 15.93622361 17.06734951 18.41971107 20.05103261 22.04624851
  24.54093288 27.77481248]
 [28.6151859  26.12692701 24.00665591 22.22311631 20.72434873 19.46202831
  18.39594175 17.49347869 16.72820756 16.07855335 15.52675778 15.05809554
  14.66028553 14.32304376 14.03773839 13.79711929 13.59510317 13.42660096
  13.28737822 13.17394192 13.0834489  13.01363245 12.96274435 12.92951055
  12.91309908 12.91309908 12.92951055 12.96274435 13.01363245 13.0834489
  13.17394192 13.28737822 13.42660096 13.59510317 13.79711929 14.03773839
  14.32304376 14.66028553 15.05809554 15.52675778 16.07855335 16.72820756
  17.49347869 18.39594175 19.46202831 20.72434873 22.22311631 24.00665591
  26.12692701 28.6151859 ]
 [29.01584226 27.13770816 25.44053454 23.94970581 22.65884975 21.5492565
  20.59901908 19.78686346 19.09354118 18.50217665 17.99819604 17.56910864
  17.20425362 16.89455663 16.63231167 16.41099161 16.22508644 16.06996624
  15.94176624 15.83729088 15.75393473 15.68961802 15.64273534 15.612116
  15.5969952  15.5969952  15.612116   15.64273534 15.68961802 15.75393473
  15.83729088 15.94176624 16.06996624 16.22508644 16.41099161 16.63231167
  16.89455663 17.20425362 17.56910864 17.99819604 18.50217665 19.09354118
  19.78686346 20.59901908 21.5492565  22.65884975 23.94970581 25.44053454
  27.13770816 29.01584226]
 [29.27551884 27.86552467 26.55164374 25.36334225 24.30949361 23.38672148
  22.58544126 21.89353975 21.29840947 20.78798592 20.35122177 19.97825703
  19.6604319  19.39022294 19.16114633 18.96765119 18.80501503 18.66924714
  18.55700246 18.46550679 18.39249326 18.33614948 18.29507483 18.26824716
  18.25499837 18.25499837 18.26824716 18.29507483 18.33614948 18.39249326
  18.46550679 18.55700246 18.66924714 18.80501503 18.96765119 19.16114633
  19.39022294 19.6604319  19.97825703 20.35122177 20.78798592 21.29840947
  21.89353975 22.58544126 23.38672148 24.30949361 25.36334225 26.55164374
  27.86552467 29.27551884]
 [29.47424512 28.44297677 27.46622342 26.56646159 25.75477471 25.0336807
  24.40016827 23.84810698 23.36990997 22.95758337 22.60334089 22.29993361
  22.04080278 21.82012746 21.63281299 21.47444841 21.34125002 21.2300011
  21.13799341 21.06297363 21.00309614 20.95688284 20.92319002 20.90118235
  20.89031352 20.89031352 20.90118235 20.92319002 20.95688284 21.00309614
  21.06297363 21.13799341 21.2300011  21.34125002 21.47444841 21.63281299
  21.82012746 22.04080278 22.29993361 22.60334089 22.95758337 23.36990997
  23.84810698 24.40016827 25.0336807  25.75477471 26.56646159 27.46622342
  28.44297677 29.47424512]
 [29.64129287 28.93509528 28.26024813 27.63160721 27.05804836 26.54324004
  26.08697877 25.68651934 25.33765617 25.03550604 24.77502876 24.5513481
  24.3599321  24.19668077 24.05795537 23.94057327 23.84178402 23.75923646
  23.69094309 23.63524538 23.59078193 23.55646072 23.53143586 23.51508901
  23.50701559 23.50701559 23.51508901 23.53143586 23.55646072 23.59078193
  23.63524538 23.69094309 23.75923646 23.84178402 23.94057327 24.05795537
  24.19668077 24.3599321  24.5513481  24.77502876 25.03550604 25.33765617
  25.68651934 26.08697877 26.54324004 27.05804836 27.63160721 28.26024813
  28.93509528 29.64129287]
 [29.79077638 29.37811444 28.98188555 28.61042209 28.26918544 27.96090819
  27.68611659 27.44376125 27.2317952  27.04763246 26.88847796 26.7515464
  26.63419605 26.53400218 26.44879021 26.37664352 26.31589641 26.26511908
  26.22309918 26.18882278 26.16145621 26.14032996 26.12492497 26.11486161
  26.10989137 26.10989137 26.11486161 26.12492497 26.14032996 26.16145621
  26.18882278 26.22309918 26.26511908 26.31589641 26.37664352 26.44879021
  26.53400218 26.63419605 26.7515464  26.88847796 27.04763246 27.2317952
  27.44376125 27.68611659 27.96090819 28.26918544 28.61042209 28.98188555
  29.37811444 29.79077638]
 [29.93119685 29.79538654 29.66470995 29.54184441 29.42861476 29.32600165
  29.23427573 29.15318042 29.08211095 29.02026331 28.96674566 28.92065478
  28.88112458 28.84735391 28.81862024 28.79428412 28.77378815 28.75665279
  28.74247077 28.73090107 28.72166305 28.71453116 28.70933049 28.70593305
  28.70425506 28.70425506 28.70593305 28.70933049 28.71453116 28.72166305
  28.73090107 28.74247077 28.75665279 28.77378815 28.79428412 28.81862024
  28.84735391 28.88112458 28.92065478 28.96674566 29.02026331 29.08211095
  29.15318042 29.23427573 29.32600165 29.42861476 29.54184441 29.66470995
  29.79538654 29.93119685]]
Phi[[27.77481248 24.54093288 22.04624851 20.05103261 18.41971107 17.06734951
  15.93622361 14.98461238 14.18096781 13.50064067 12.9239134  12.43474646
  12.01993761 11.66853266 11.37139682 11.12089314 10.91063513 10.73529299
  10.59043975 10.47242822 10.3782925  10.30566961 10.25273793 10.21817038
  10.2011005  10.2011005  10.21817038 10.25273793 10.30566961 10.3782925
  10.47242822 10.59043975 10.73529299 10.91063513 11.12089314 11.37139682
  11.66853266 12.01993761 12.43474646 12.9239134  13.50064067 14.18096781
  14.98461238 15.93622361 17.06734951 18.41971107 20.05103261 22.04624851
  24.54093288 27.77481248]
 [28.6151859  26.12692701 24.00665591 22.22311631 20.72434873 19.46202831
  18.39594175 17.49347869 16.72820756 16.07855335 15.52675778 15.05809554
  14.66028553 14.32304376 14.03773839 13.79711929 13.59510317 13.42660096
  13.28737822 13.17394192 13.0834489  13.01363245 12.96274435 12.92951055
  12.91309908 12.91309908 12.92951055 12.96274435 13.01363245 13.0834489
  13.17394192 13.28737822 13.42660096 13.59510317 13.79711929 14.03773839
  14.32304376 14.66028553 15.05809554 15.52675778 16.07855335 16.72820756
  17.49347869 18.39594175 19.46202831 20.72434873 22.22311631 24.00665591
  26.12692701 28.6151859 ]
 [29.01584226 27.13770816 25.44053454 23.94970581 22.65884975 21.5492565
  20.59901908 19.78686346 19.09354118 18.50217665 17.99819604 17.56910864
  17.20425362 16.89455663 16.63231167 16.41099161 16.22508644 16.06996624
  15.94176624 15.83729088 15.75393473 15.68961802 15.64273534 15.612116
  15.5969952  15.5969952  15.612116   15.64273534 15.68961802 15.75393473
  15.83729088 15.94176624 16.06996624 16.22508644 16.41099161 16.63231167
  16.89455663 17.20425362 17.56910864 17.99819604 18.50217665 19.09354118
  19.78686346 20.59901908 21.5492565  22.65884975 23.94970581 25.44053454
  27.13770816 29.01584226]
 [29.27551884 27.86552467 26.55164374 25.36334225 24.30949361 23.38672148
  22.58544126 21.89353975 21.29840947 20.78798592 20.35122177 19.97825703
  19.6604319  19.39022294 19.16114633 18.96765119 18.80501503 18.66924714
  18.55700246 18.46550679 18.39249326 18.33614948 18.29507483 18.26824716
  18.25499837 18.25499837 18.26824716 18.29507483 18.33614948 18.39249326
  18.46550679 18.55700246 18.66924714 18.80501503 18.96765119 19.16114633
  19.39022294 19.6604319  19.97825703 20.35122177 20.78798592 21.29840947
  21.89353975 22.58544126 23.38672148 24.30949361 25.36334225 26.55164374
  27.86552467 29.27551884]
 [29.47424512 28.44297677 27.46622342 26.56646159 25.75477471 25.0336807
  24.40016827 23.84810698 23.36990997 22.95758337 22.60334089 22.29993361
  22.04080278 21.82012746 21.63281299 21.47444841 21.34125002 21.2300011
  21.13799341 21.06297363 21.00309614 20.95688284 20.92319002 20.90118235
  20.89031352 20.89031352 20.90118235 20.92319002 20.95688284 21.00309614
  21.06297363 21.13799341 21.2300011  21.34125002 21.47444841 21.63281299
  21.82012746 22.04080278 22.29993361 22.60334089 22.95758337 23.36990997
  23.84810698 24.40016827 25.0336807  25.75477471 26.56646159 27.46622342
  28.44297677 29.47424512]
 [29.64129287 28.93509528 28.26024813 27.63160721 27.05804836 26.54324004
  26.08697877 25.68651934 25.33765617 25.03550604 24.77502876 24.5513481
  24.3599321  24.19668077 24.05795537 23.94057327 23.84178402 23.75923646
  23.69094309 23.63524538 23.59078193 23.55646072 23.53143586 23.51508901
  23.50701559 23.50701559 23.51508901 23.53143586 23.55646072 23.59078193
  23.63524538 23.69094309 23.75923646 23.84178402 23.94057327 24.05795537
  24.19668077 24.3599321  24.5513481  24.77502876 25.03550604 25.33765617
  25.68651934 26.08697877 26.54324004 27.05804836 27.63160721 28.26024813
  28.93509528 29.64129287]
 [29.79077638 29.37811444 28.98188555 28.61042209 28.26918544 27.96090819
  27.68611659 27.44376125 27.2317952  27.04763246 26.88847796 26.7515464
  26.63419605 26.53400218 26.44879021 26.37664352 26.31589641 26.26511908
  26.22309918 26.18882278 26.16145621 26.14032996 26.12492497 26.11486161
  26.10989137 26.10989137 26.11486161 26.12492497 26.14032996 26.16145621
  26.18882278 26.22309918 26.26511908 26.31589641 26.37664352 26.44879021
  26.53400218 26.63419605 26.7515464  26.88847796 27.04763246 27.2317952
  27.44376125 27.68611659 27.96090819 28.26918544 28.61042209 28.98188555
  29.37811444 29.79077638]
 [29.93119685 29.79538654 29.66470995 29.54184441 29.42861476 29.32600165
  29.23427573 29.15318042 29.08211095 29.02026331 28.96674566 28.92065478
  28.88112458 28.84735391 28.81862024 28.79428412 28.77378815 28.75665279
  28.74247077 28.73090107 28.72166305 28.71453116 28.70933049 28.70593305
  28.70425506 28.70425506 28.70593305 28.70933049 28.71453116 28.72166305
  28.73090107 28.74247077 28.75665279 28.77378815 28.79428412 28.81862024
  28.84735391 28.88112458 28.92065478 28.96674566 29.02026331 29.08211095
  29.15318042 29.23427573 29.32600165 29.42861476 29.54184441 29.66470995
  29.79538654 29.93119685]]
Phi[[27.77481248 24.54093288 22.04624851 20.05103261 18.41971107 17.06734951
  15.93622361 14.98461238 14.18096781 13.50064067 12.9239134  12.43474646
  12.01993761 11.66853266 11.37139682 11.12089314 10.91063513 10.73529299
  10.59043975 10.47242822 10.3782925  10.30566961 10.25273793 10.21817038
  10.2011005  10.2011005  10.21817038 10.25273793 10.30566961 10.3782925
  10.47242822 10.59043975 10.73529299 10.91063513 11.12089314 11.37139682
  11.66853266 12.01993761 12.43474646 12.9239134  13.50064067 14.18096781
  14.98461238 15.93622361 17.06734951 18.41971107 20.05103261 22.04624851
  24.54093288 27.77481248]
 [28.6151859  26.12692701 24.00665591 22.22311631 20.72434873 19.46202831
  18.39594175 17.49347869 16.72820756 16.07855335 15.52675778 15.05809554
  14.66028553 14.32304376 14.03773839 13.79711929 13.59510317 13.42660096
  13.28737822 13.17394192 13.0834489  13.01363245 12.96274435 12.92951055
  12.91309908 12.91309908 12.92951055 12.96274435 13.01363245 13.0834489
  13.17394192 13.28737822 13.42660096 13.59510317 13.79711929 14.03773839
  14.32304376 14.66028553 15.05809554 15.52675778 16.07855335 16.72820756
  17.49347869 18.39594175 19.46202831 20.72434873 22.22311631 24.00665591
  26.12692701 28.6151859 ]
 [29.01584226 27.13770816 25.44053454 23.94970581 22.65884975 21.5492565
  20.59901908 19.78686346 19.09354118 18.50217665 17.99819604 17.56910864
  17.20425362 16.89455663 16.63231167 16.41099161 16.22508644 16.06996624
  15.94176624 15.83729088 15.75393473 15.68961802 15.64273534 15.612116
  15.5969952  15.5969952  15.612116   15.64273534 15.68961802 15.75393473
  15.83729088 15.94176624 16.06996624 16.22508644 16.41099161 16.63231167
  16.89455663 17.20425362 17.56910864 17.99819604 18.50217665 19.09354118
  19.78686346 20.59901908 21.5492565  22.65884975 23.94970581 25.44053454
  27.13770816 29.01584226]
 [29.27551884 27.86552467 26.55164374 25.36334225 24.30949361 23.38672148
  22.58544126 21.89353975 21.29840947 20.78798592 20.35122177 19.97825703
  19.6604319  19.39022294 19.16114633 18.96765119 18.80501503 18.66924714
  18.55700246 18.46550679 18.39249326 18.33614948 18.29507483 18.26824716
  18.25499837 18.25499837 18.26824716 18.29507483 18.33614948 18.39249326
  18.46550679 18.55700246 18.66924714 18.80501503 18.96765119 19.16114633
  19.39022294 19.6604319  19.97825703 20.35122177 20.78798592 21.29840947
  21.89353975 22.58544126 23.38672148 24.30949361 25.36334225 26.55164374
  27.86552467 29.27551884]
 [29.47424512 28.44297677 27.46622342 26.56646159 25.75477471 25.0336807
  24.40016827 23.84810698 23.36990997 22.95758337 22.60334089 22.29993361
  22.04080278 21.82012746 21.63281299 21.47444841 21.34125002 21.2300011
  21.13799341 21.06297363 21.00309614 20.95688284 20.92319002 20.90118235
  20.89031352 20.89031352 20.90118235 20.92319002 20.95688284 21.00309614
  21.06297363 21.13799341 21.2300011  21.34125002 21.47444841 21.63281299
  21.82012746 22.04080278 22.29993361 22.60334089 22.95758337 23.36990997
  23.84810698 24.40016827 25.0336807  25.75477471 26.56646159 27.46622342
  28.44297677 29.47424512]
 [29.64129287 28.93509528 28.26024813 27.63160721 27.05804836 26.54324004
  26.08697877 25.68651934 25.33765617 25.03550604 24.77502876 24.5513481
  24.3599321  24.19668077 24.05795537 23.94057327 23.84178402 23.75923646
  23.69094309 23.63524538 23.59078193 23.55646072 23.53143586 23.51508901
  23.50701559 23.50701559 23.51508901 23.53143586 23.55646072 23.59078193
  23.63524538 23.69094309 23.75923646 23.84178402 23.94057327 24.05795537
  24.19668077 24.3599321  24.5513481  24.77502876 25.03550604 25.33765617
  25.68651934 26.08697877 26.54324004 27.05804836 27.63160721 28.26024813
  28.93509528 29.64129287]
 [29.79077638 29.37811444 28.98188555 28.61042209 28.26918544 27.96090819
  27.68611659 27.44376125 27.2317952  27.04763246 26.88847796 26.7515464
  26.63419605 26.53400218 26.44879021 26.37664352 26.31589641 26.26511908
  26.22309918 26.18882278 26.16145621 26.14032996 26.12492497 26.11486161
  26.10989137 26.10989137 26.11486161 26.12492497 26.14032996 26.16145621
  26.18882278 26.22309918 26.26511908 26.31589641 26.37664352 26.44879021
  26.53400218 26.63419605 26.7515464  26.88847796 27.04763246 27.2317952
  27.44376125 27.68611659 27.96090819 28.26918544 28.61042209 28.98188555
  29.37811444 29.79077638]
 [29.93119685 29.79538654 29.66470995 29.54184441 29.42861476 29.32600165
  29.23427573 29.15318042 29.08211095 29.02026331 28.96674566 28.92065478
  28.88112458 28.84735391 28.81862024 28.79428412 28.77378815 28.75665279
  28.74247077 28.73090107 28.72166305 28.71453116 28.70933049 28.70593305
  28.70425506 28.70425506 28.70593305 28.70933049 28.71453116 28.72166305
  28.73090107 28.74247077 28.75665279 28.77378815 28.79428412 28.81862024
  28.84735391 28.88112458 28.92065478 28.96674566 29.02026331 29.08211095
  29.15318042 29.23427573 29.32600165 29.42861476 29.54184441 29.66470995
  29.79538654 29.93119685]]
#+end_example

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  def plotter(data_list, mesh):
      fig, axes = plt.subplots(4, figsize= (10,12))
      fig2, axes2 = plt.subplots(4, figsize= (10,12))
      list_length = len(data_list)
      i = 0

      for  row, ax, ax2 in zip([0, round(list_length/4),round(3*list_length/4), list_length-1], axes.flat, axes2.flat):
          for time, data in data_list[row].items():
              x_cords = mesh.grid["x_grid"].cell_cordinates
              y_cords = mesh.grid["y_grid"].cell_cordinates
              logger.debug(row)
              xv, yv = np.meshgrid(x_cords, y_cords)

              tmin,tmax = 12,31
              y_cells = data.shape[0]

              #Plot the temperature profiles for each time step
              im = ax.pcolormesh(xv, yv, data,vmax = 30, vmin = tmin)
              ax.set_title(f"Temperature Profile at Time {row} s")

              #Plot the the temperature distributions for various horizontal lines
              group = [1,2,3]
              midline = round(y_cells/2)
              top_quarter_line = round(y_cells/4)
              bottom_quarter_line = round(3*y_cells/4)

              line_list = [midline, top_quarter_line, bottom_quarter_line]
              color_group ={1:"red",2:"blue", 3:"green"}
              color_group_name = {1:"midline",2:"top", 3:"bottom"}

              for g in group:
                  line_row = line_list[g-1]
                  ax.axhline(y = (1-(line_row/y_cells)), color = color_group[g])
                  im2 = ax2.plot(x_cords,data[line_row,:], color = color_group[g], label = color_group_name[g])

                  ax2.axis((0,5,tmin, tmax))
                  ax2.set_ylabel("temperature (celcius)")
                  ax2.set_title(f"midpoint temperature at time {row} s")
                  ax2.legend()

                  fig.subplots_adjust(bottom = 0.1 ,top = 0.9, hspace =0.4)
                  fig.colorbar(im, ax = axes.ravel().tolist(), label = "temperature (celcius)")

                  fig2.subplots_adjust(bottom = 0.1 ,top = 0.9, hspace =0.5)
                  fig.savefig("transient.png")
                  fig2.savefig("transient2.png")

#+END_SRC

#+RESULTS:



#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results graphics file :file transient.png :exports both :session Python-Session
  plotter(data_list = transient_list, mesh = transient_mesh)
  # fig, axes = plt.subplots(4, figsize= (10,12))
  # fig2, axes2 = plt.subplots(4, figsize= (10,12))
  # list_length = len(transient_list)
  # i = 0

  # for  row, ax, ax2 in zip([0, round(list_length/4),round(3*list_length/4), list_length-1], axes.flat, axes2.flat):
  #   for time, data in transient_list[row].items():
  #         x_cords = transient_mesh.grid["x_grid"].cell_cordinates
  #         y_cords = transient_mesh.grid["y_grid"].cell_cordinates
  #         logger.debug(row)
  #         xv, yv = np.meshgrid(x_cords, y_cords)

  #         tmin,tmax = 12,31
  #         y_cells = data.shape[0]

  #         #Plot the temperature profiles for each time step
  #         im = ax.pcolormesh(xv, yv, data,vmax = 30, vmin = tmin)
  #         ax.set_title(f"Temperature Profile at Time {row} s")

  #         #Plot the the temperature distributions for various horizontal lines
  #         group = [1,2,3]
  #         midline = round(y_cells/2)
  #         top_quarter_line = round(y_cells/4)
  #         bottom_quarter_line = round(3*y_cells/4)

  #         line_list = [midline, top_quarter_line, bottom_quarter_line]
  #         color_group ={1:"red",2:"blue", 3:"green"}
  #         color_group_name = {1:"midline",2:"top", 3:"bottom"}

  #         for g in group:
  #           line_row = line_list[g-1]
  #           ax.axhline(y = (1-(line_row/y_cells)), color = color_group[g])
  #           im2 = ax2.plot(x_cords,data[line_row,:], color = color_group[g], label = color_group_name[g])

  #         ax2.axis((0,5,tmin, tmax))
  #         ax2.set_ylabel("temperature (celcius)")
  #         ax2.set_title(f"midpoint temperature at time {row} s")
  #         ax2.legend()

  # fig.subplots_adjust(bottom = 0.1 ,top = 0.9, hspace =0.4)
  # fig.colorbar(im, ax = axes.ravel().tolist(), label = "temperature (celcius)")

  # fig2.subplots_adjust(bottom = 0.1 ,top = 0.9, hspace =0.5)
  # fig.savefig("transient.png")
  # fig2.savefig("transient2.png")


#+END_SRC

#+RESULTS:
[[file:transient.png]]
[[./transqient2.png]]

* Part 4: Advection Diffusion



#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results none:exports both :session Python-Session
  x_cells = 40
  y_cells = 20
  diffusivity = 0.146
  transient_mesh = CartesianMesh(
    dimensions = 2,
    n_cells = [x_cells, y_cells],
    cordinates = [(0,5), (0,1)],
    mesh_type = "finite_volume",
    conductivity = conductivity,
    diffusivity = diffusivity
  )

  transient_mesh.set_dirichlet_boundary(side="left", phi=50)
  transient_mesh.set_dirichlet_boundary(side="right", phi=temp_right)
  transient_mesh.set_dirichlet_boundary(side="bottom", phi=temp_bottom)

  transient_mesh.set_neumann_boundary(side="top", flux=-10/conductivity)

  #Set the initial condition
  transient_mesh.phi.set_phi(30)

  #Create a laplacian and boundary condition to update the diffuison mesh
  ux = 1
  convection_mesh = linear_convection_mesh(
      x = x_range,
      n_cells= x_cells,
      mesh_type= "finite_volume",
      discretization_type= "upwind")

  convection_mesh.set_dirichlet_boundary("left", phi = 50)


  dx = transient_mesh.grid["x_grid"].cell_width
  Iy = np.identity(y_cells)

  twod_x_lap = (ux/dx) * np.kron(Iy,convection_mesh.laplacian)
  #logger.debug(f"{twod_x_lap}")


  twod_x_bc = (ux/(dx)) * convection_mesh.boundary_condition_array.reshape(1,x_cells).repeat(y_cells, axis = 0).flatten()

  #logger.debug(f"{(ux/dx) * convection_mesh.boundary_condition_array.reshape(1,x_cells).repeat(y_cells, axis = 0)}")




  #add the convective portion to the mesh
  #logger.debug(f"conv laplacian:\n {twod_x_lap}")
  #logger.debug(f"laplacian: pre add conv \n {transient_mesh.laplacian}")
  transient_mesh.laplacian = transient_mesh.laplacian + twod_x_lap
  #logger.debug(f"laplacian: post add conv \n {transient_mesh.laplacian}")
  transient_mesh.boundary_condition_array = transient_mesh.boundary_condition_array + twod_x_bc
  ##############################################################
  solver_step_size = 5/(100*ux)
  round_threshold = 2+ len(str(round(solver_step_size)))

  logger.debug(f"sover_step_size: {solver_step_size}")

  #Create the implicit solver
  transient_solver = Solver(
      mesh = transient_mesh,
      method = "implicit",
      time_step_size = solver_step_size

  )
  transient_list = []
  record_time_step_time = solver_step_size * 10

  max_time = solver_step_size *1000
  #transient_solver.solve_steady()
  transient_dict[0] = transient_mesh.phi.get_phi().copy()
  #logger.debug(f"dict_0 {transient_dict[0]}")

  transient_mesh.phi.set_phi(30)
  time = 0
  while time < max_time:

      transient_solver.solve(
          t_initial = time,
          t_final = time + record_time_step_time)

      time = round(
          transient_solver.current_time,
          round_threshold
      )

      logger.debug(f"time : {time}")

      #transient_dict[time] = transient_mesh.phi.get_phi()
      transient_list.append({time:transient_mesh.phi.get_phi()})


#+END_SRC

#+RESULTS:


#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results graphics file :file advection_transient.png :exports both :session Python-Session
  fig, axes = plt.subplots(3, figsize= (10,12))
  list_length = len(transient_list)
  i = 0
  for  row, ax in zip([0, round(list_length/2), list_length-1], axes.flat):
      for time, data in transient_list[row].items():

          x_cords = transient_mesh.grid["x_grid"].cell_cordinates
          y_cords = transient_mesh.grid["y_grid"].cell_cordinates

          xv, yv = np.meshgrid(x_cords, y_cords)
          #axis = plt.subplot(3,1,i+1)
          #axis.set_title(row)
          im = ax.pcolormesh(xv, yv, data)
          ax.set_title(f"time {time}s")
          i = i +1
          fig.colorbar(im, label ="temp")
  #fig.colorbar(im, ax = axes.ravel().tolist(), label = "temperature (celcius)")
  plt.savefig("advection_transient.png")

#+END_SRC

#+RESULTS:
[[file:advection_transient.png]]
