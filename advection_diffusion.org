#+TITLE: Code Project
#+AUTHOR: Bray Moll
#+OPTIONS: toc:nil
#+SETUPFILE: ~/masters/bray-standard-latex-export.org
#+BIBLIOGRAPHY: ../citations.bib
[[https://github.com/bkm82/bray-pde/actions][https://github.com/bkm82/1D_Heat_Diffusion/actions/workflows/tests.yml/badge.svg]]

[[./examples/advection_diffusion_project/advection_diffusion_mixed_temperature_profile.png]]

* Installation
The code used in this project has been published as a pypi package and can be installed using pip.
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  pip install bray-pde
#+END_SRC
Then from python session the examples can be imported using
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
    import solver.code_project.main as project
#+END_SRC
Each solution can then be ran independently as
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
  project.SteadyState()
  project.Generation()
  project.Transient()
  project.AdvectionDiffusion()
#+END_SRC

Or all at once
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
    project.main()
#+END_SRC
* Problem Description
** Example Problems
This code can be utilized to solve 1 and 2 dimension PDE's. In this example we will show how the code can be used to solve a 4 different 2d problems.

Part 1 condsiders the steady state problem with no advection or generation terms for a thin water column with the spatial domain of  $x \epsilon(0,5m)$ and $y \epsilon(0,1m)$ with a dirichlet boundary conditions of 30 degrees celcius on the left, bottom, and top surface and a neumann boundary condition of $q = 10 \frac{W}{m^2}$ on the top surface

Part 2 condsiders the same formulation as part 1 with an added source term Q=50e^{-(x)^2}

Part 3 considers the unsteady case of part 1, starting from an initial condition of T(0,x,y) = 30c until a steady state is achieved

Part 4 considers the advection-diffusion problem with a left dirichelet boundary condition of 50c, for three constant velocities $\textbf{V} = [0.01,0], [0.1,0], [1,0] m/s$
* Part 1 Steady State
[[./examples/advection_diffusion_project/steady.png]]
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session :tangle "../../../../src/solver/code_project/main.py
  class SteadyStateSolver:
     def __init__(self, settings = Setup()):
        self.settings = settings

     def solve(self):
        self.mesh_dict = {}
        energy_balance_dict = {}
        for mesh_size , cells in self.settings.mesh_size_dict.items():
           x_cells , y_cells  = cells

           self.mesh_dict[mesh_size] = self.settings.create_mesh(
              x_cells = x_cells,
              y_cells=y_cells
           )
           # Solve the steady Case
           Solver(mesh = self.mesh_dict[mesh_size]).solve_steady()
           energy_balance_dict[mesh_size] = EnergyBalance(mesh = self.mesh_dict[mesh_size])
           logger.info(f"\n Mesh Size:{mesh_size}")
           total_flux = energy_balance_dict[mesh_size].flux("all")

     def plot(self):
        fig, ax = plt.subplots(len(self.mesh_dict), figsize= (10,12))
        i = 0
        for  mesh_size, mesh in self.mesh_dict.items():

           x_cords = mesh.grid["x_grid"].cell_cordinates
           y_cords = mesh.grid["y_grid"].cell_cordinates
           logger.debug(x_cords)
           xv, yv = np.meshgrid(x_cords, y_cords)
           axis = plt.subplot(len(self.mesh_dict),1,i+1)
           axis.set_title(mesh_size)
           steady = axis.pcolormesh(xv, yv, mesh.phi.get_phi())

           i = i +1

           fig.colorbar(steady, label = "temperature (celcius)")
           plt.savefig("steady.png")

  def SteadyState():
      steady = SteadyStateSolver()
      steady.solve()
      steady.plot()

#+END_SRC

#+RESULTS:

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports output :session Python-Session
  SteadyState()
#+END_SRC
#+RESULTS:
#+begin_example

 Mesh Size:course
solver.utilities:INFO:flux:
 Left Flux: 5.984599731767105 W
 Right Flux: 5.984599731767105 W
 Bottom Flux: 38.03080053646583 W
 Generation: 0.0 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 8.131861707906003e-28 W
 Flux leaving boundarys: 4.440892098500626e-14W
 Total Flux: 4.440892098500626e-14

 Mesh Size:medium
solver.utilities:INFO:flux:
 Left Flux: 7.330052111172102 W
 Right Flux: 7.330052111172095 W
 Bottom Flux: 35.339895777655755 W
 Generation: 0.0 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 2.2277109653610886e-26 W
 Flux leaving boundarys: -5.684341886080802e-14W
 Total Flux: -5.684341886080802e-14

 Mesh Size:fine
solver.utilities:INFO:flux:
 Left Flux: 7.410898164506065 W
 Right Flux: 7.4108981645061895 W
 Bottom Flux: 35.178203670991046 W
 Generation: 0.0 W
 Top Flux: -49.99999999999999 W
 Cell Sum Squared Error: 1.7166707559454444e-25 W
 Flux leaving boundarys: 3.304023721284466e-12W
 Total Flux: 3.304023721284466e-12

 Mesh Size:ultra_fine
solver.utilities:INFO:flux:
 Left Flux: 7.417294624355647 W
 Right Flux: 7.417294624356283 W
 Bottom Flux: 35.165410751328 W
 Generation: 0.0 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 1.6155439387848486e-24 W
 Flux leaving boundarys: 3.991829089500243e-11W
 Total Flux: 3.991829089500243e-11
#+end_example

Due to the finite volume scheme, the total flux error and the sum of each cells squared error is relativly independent of mesh size. The overall error increases slightly with the higher number of points due to the numerical round off error present with the higher number of calcualtions.

* Part 2: With Generation
[[./examples/advection_diffusion_project/generation.png]]
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session :tangle "../../../../src/solver/code_project/main.py
  class GenerationSolver:
      def __init__(self, settings = Setup()):
          self.settings = settings
      def solve(self):
          self.generation_mesh_dict = {}
          generation_energy_balance_dict = {}
          def gen_function (x, y):
              return(0*y+ 50*np.exp(-(x-2.5)**2))
          for mesh_size , cells in self.settings.mesh_size_dict.items():
              x_cells , y_cells  = cells

              #Create the mesh
              self.generation_mesh_dict[mesh_size] = self.settings.create_mesh(
                  x_cells = x_cells,y_cells=y_cells)

              #Add the generation function
              self.generation_mesh_dict[mesh_size].set_generation(function = gen_function)

              # Solve the steady Case with generation
              Solver(
                  mesh = self.generation_mesh_dict[mesh_size]
              ).solve_steady()
              generation_energy_balance_dict[mesh_size] = EnergyBalance(
                  mesh = self.generation_mesh_dict[mesh_size])
              logger.info(f"\n Mesh Size:{mesh_size}")
              total_flux = generation_energy_balance_dict[mesh_size].flux("all")
      def plot(self):
          self.settings.plot_steady(self.generation_mesh_dict, "generation.png")

  def Generation():
      generation = GenerationSolver()
      generation.solve()
      generation.plot()

#+END_SRC

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
    Generation()
#+END_SRC
#+RESULTS:
#+begin_example

 Mesh Size:course
solver.utilities:INFO:flux:
 Left Flux: 3.050929235793739 W
 Right Flux: 3.050929235793736 W
 Bottom Flux: -44.721366477605116 W
 Generation: 88.61950800601765 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 1.3769936879182083e-27 W
 Flux leaving boundarys: -88.61950800601764W
 Total Flux: 1.9984014443252818e-14

 Mesh Size:medium
solver.utilities:INFO:flux:
 Left Flux: 4.701073325592375 W
 Right Flux: 4.70107332559235 W
 Bottom Flux: -47.991201972823 W
 Generation: 88.58905532163828 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 2.551527219976484e-26 W
 Flux leaving boundarys: -88.58905532163827W
 Total Flux: 1.2878587085651816e-14

 Mesh Size:fine
solver.utilities:INFO:flux:
 Left Flux: 4.785512273955572 W
 Right Flux: 4.785512273955726 W
 Bottom Flux: -48.157752314938016 W
 Generation: 88.58672776703278 W
 Top Flux: -49.99999999999999 W
 Cell Sum Squared Error: 3.4356761443066776e-25 W
 Flux leaving boundarys: -88.58672776702672W
 Total Flux: 6.0751403907488566e-12

 Mesh Size:ultra_fine
solver.utilities:INFO:flux:
 Left Flux: 4.804574739708152 W
 Right Flux: 4.804574739708852 W
 Bottom Flux: -48.195801968524805 W
 Generation: 88.58665248917005 W
 Top Flux: -50.0 W
 Cell Sum Squared Error: 3.482364056824771e-24 W
 Flux leaving boundarys: -88.5866524891078W
 Total Flux: 6.225775450729998e-11
#+end_example

[[./examples/advection_diffusion_project/generation.png]]

In the generation case you can see the overall energy balance still holds for the finite volume discritization regardless of discritization size. As expected, the energy generated is balanced by the energy leaving the control volume. The source term was strong enough to have a flux out of the control volume on the the bottom boundary. Also of note, the maximum temperature reached was ~ 90 degrees celcius which is approaching a range where, depending on the application, the assumption of a constant thermal conductivity could be introducing a non-negligable amound of error into calculating the solution.

* Part 3: Transient
[[./examples/advection_diffusion_project/transient_temperature_profile.png]]
To obtain a rough estimate the time to perform the simulation we can use the formula
\begin{equation*}
\frac{Water Mass * (T _{final} - T _{start}) * Specific Heat}{Cooling Rate}
\end{equation*}

Aproximating the cooling rate as being the average of its starting rate (50W from the top) and 0W (steady state) = 25W.

The temperatures are 30 celcius and the average temperature seen in the steady state case.
At these temperatures, the isobaric and isochoric specific heats are aproximatly equivalent at 4.1379 kJ/kgK [cite:@Water_Specific_Heat_EngineeringToolBox]

\begin{equation*}
\frac{5 (m) * 1 (m) * \frac{1000 kg}{m^3} * (T _{final} -30 )K * 41379 \frac{J}{kgK}}{-25 \frac{J}{s m^2} } =
\end{equation*}
where L is the lenght into the page
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session

  average_final_temp =np.mean(mesh_dict["fine"].phi.get_phi())
  time_estimate = ((5*1)*1000*(average_final_temp - 30)*41379)/(-25)
  logger.info(f"Time Estimate: {time_estimate}s")
#+END_SRC

#+RESULTS:
: Time Estimate: 67171960.47650723s

This time estimate can also be obtained using the einstein's approximation equations [cite:@Diffusion_Time_Calculator]

$$
 t \approx \frac{x ^2}{alpha} = \frac{1 m^2}{2* 0.146 *10^{-6}\frac{m^2}{s}} \approx 0.2 *10 ^6 seconds
$$

This shows that the time scales of interest are on the order of 1 million seconds. Recalling that for an explicit solver we need
\begin{equation*}
\Delta t \le \frac{\Delta x ^2}{2\alpha ^2}
\end{equation*}
With a realistic desired discritization size of $\Delta x = 0.01$ and our thermal diffusivity of $0.146 *10 ^{-6} \frac{m^2}{s}$ an Explicit solver would require a time step size on the order of 100 seconds which would require roughly 10^4 time steps for the finer meshes.For this reason an implicit solver was chosen.

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session :tangle "../../../../src/solver/code_project/main.py
  class TransientSolver:
    def __init__(self, settings = Setup()):
      self.settings = settings


    def solve(self):
      self.transient_mesh = self.settings.create_mesh()
      self.transient_mesh.phi.set_phi(30)

      #Create the implicit solver
      self.transient_solver = Solver(
        mesh = self.transient_mesh,
        method = "implicit",
        time_step_size = 10000
      )

      self.transient_solver.solve(
        t_final = 14000000,
        record_step = 100,
        compute_error_flag = True,
        tolerance = 0.1
      )

    def plot(self):
      transient_plotter= Plotter(mesh = self.transient_mesh)
      transient_plotter.transient_plotter(
        data_list = self.transient_solver.saved_state_list,
        name = "transient")

  def Transient():
      transient = TransientSolver()
      transient.solve()
      transient.plot()
#+END_SRC

#+RESULTS:
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session
    Transient()
#+END_SRC

#+RESULTS:
#+begin_example
solver.solver:INFO:compute_error:Time: 1000000, RMSPE: 13.686435117459721
solver.solver:INFO:compute_error:Time: 2000000, RMSPE: 9.032248864389436
solver.solver:INFO:compute_error:Time: 3000000, RMSPE: 5.97143759557091
solver.solver:INFO:compute_error:Time: 4000000, RMSPE: 3.945127397456205
solver.solver:INFO:compute_error:Time: 5000000, RMSPE: 2.604738881567865
solver.solver:INFO:compute_error:Time: 6000000, RMSPE: 1.718969112895572
solver.solver:INFO:compute_error:Time: 7000000, RMSPE: 1.1340631542603474
solver.solver:INFO:compute_error:Time: 8000000, RMSPE: 0.7480277052323432
solver.solver:INFO:compute_error:Time: 9000000, RMSPE: 0.49333346085210694
solver.solver:INFO:compute_error:Time: 10000000, RMSPE: 0.32533176831355054
solver.solver:INFO:compute_error:Time: 11000000, RMSPE: 0.21453034885521768
solver.solver:INFO:compute_error:Time: 12000000, RMSPE: 0.14146074967366537
solver.solver:INFO:compute_error:Time: 13000000, RMSPE: 0.09327679418999363
solver.solver:INFO:solve:steady state reached with an error: 0.09327679418999363 < tolerance: 0.1
solver.solver:INFO:compute_error:Time: 13000000, RMSPE: 0.09327679418999363
#+end_example


[[./examples/advection_diffusion_project/transient_temperature_profile.png]]
[[./examples/advection_diffusion_project/transient_line_distributions.png]]
As shown above, the temperatures reached steady state after ~13 million seconds due to the low diffusivity of water. The temperature distributions all follow a similar pattern (with a differing magnitude) as the heat diffuses towards the top. All of the dirichilet boundarys remain at a fixed temperature

* Part 4: Advection Diffusion
[[./examples/advection_diffusion_project/advection_diffusion_ultra_slow_temperature_profile.png]]
#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session :tangle "../../../../src/solver/code_project/main.py
  class AdvectionDiffusionMesh:
    def __init__(self, settings = Setup(temp_left = 50)):
      self.settings = settings

    def create_advection_diffusion_mesh(self,velocity, x_cells = 60, y_cells = 20):
      #Create our standard 2d cartesian mesh
      # mesh = self.settings.create_mesh(x_cells = x_cells, y_cells = y_cells, temp_left = 50)
      mesh = self.settings.create_mesh(x_cells = x_cells, y_cells = y_cells)
      mesh.phi.set_phi(30)

      #Create a 1d finite volume linear convective mesh (from HW5)
      convection_mesh = linear_convection_mesh(
          x = self.settings.x_range,
          n_cells= x_cells,
          mesh_type= "finite_volume",
          discretization_type= "upwind")

      convection_mesh.set_dirichlet_boundary("left", phi = 50)


      dx = mesh.grid["x_grid"].cell_width
      Iy = np.identity(y_cells)
      #make the 2d laplacian using the kronecker delta and Iy
      #This puts the 1d laplacian into every 1 in an identity of the shape y_cells x y_cells
      twod_x_lap = (velocity/dx) * np.kron(Iy,convection_mesh.laplacian)
      #logger.debug(f"{twod_x_lap}")
      twod_x_bc = (
          velocity/(dx)
      ) * convection_mesh.boundary_condition_array.reshape(
          1,x_cells).repeat(y_cells, axis = 0).flatten()

      #add the convective terms to the 2d diffusion mesh
      mesh.laplacian = mesh.laplacian + twod_x_lap
      mesh.boundary_condition_array = mesh.boundary_condition_array + twod_x_bc
      return(mesh)



#+END_SRC

#+RESULTS:


#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results none:exports both :session Python-Session :tangle "../../../../src/solver/code_project/main.py
    class AdvectionDiffusionSolver:
      def __init__(self, settings = Setup()):
        self.settings = settings
      def solve(self):
        ultra_slow_dict ={
          "name":"ultra_slow",
          "velocity":0.000001,
          "time_step_size":10000,
          "t_final":10000000,
          "record_step_time":10,
          "tolerance": 0.01
        }

        mixed_dict ={
          "name":"mixed",
          "velocity":0.00001,
          "time_step_size":1000,
          "t_final":1000000,
          "record_step_time":10,
          "tolerance": 0.01
        }

        slow_dict ={
          "name":"slow",
          "velocity":0.01,
          "time_step_size":1,
          "t_final":1000,
          "record_step_time":10,
          "tolerance": 0.01
        }

        med_dict ={
          "name":"med",
          "velocity":0.1,
          "time_step_size":0.1,
          "t_final":100,
          "record_step_time":10,
          "tolerance": 0.01
        }

        fast_dict ={
          "name":"fast",
          "velocity":1,
          "time_step_size":0.01,
          "t_final":10,
          "record_step_time":10,
          "tolerance": 0.01
        }

        settings_list= [fast_dict, med_dict, slow_dict, mixed_dict,  ultra_slow_dict]
        #settings_list= [fast_dict]

        # # make a dictionary of solvers for the various time velocities
        self.mesh_dict = {}
        self.solutions_dict = {}
        #Create the mesh
        for settings in settings_list:

          self.mesh_dict[settings["name"]]=AdvectionDiffusionMesh(
          ).create_advection_diffusion_mesh(velocity = settings["velocity"])

          self.solutions_dict[settings["name"]] = Solver(
            mesh = self.mesh_dict[settings["name"]],
            method = "implicit",
            time_step_size = settings["time_step_size"])

          self.solutions_dict[settings["name"]].solve(
            t_final = settings["t_final"],
            record_step= settings["record_step_time"],
            compute_error_flag = True,
            tolerance = settings["tolerance"]
          )

      def plot(self):
        for name, solution in self.solutions_dict.items():
          part4_plotter= Plotter(
            mesh = self.mesh_dict[name]
          ).transient_plotter(
            data_list = solution.saved_state_list,
            name = f"advection_diffusion_{name}",
            phi_min = 30,
            phi_max = 50

         )

    def AdvectionDiffusion():
      advection_diffusion = AdvectionDiffusionSolver()
      advection_diffusion.solve()
      advection_diffusion.plot()

#+END_SRC

#+RESULTS:

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports code :session Python-Session
    AdvectionDiffusion()
#+END_SRC

#+RESULTS:
#+begin_example
solver.solver:INFO:compute_error:Time: 0.09999999999999999, RMSPE: 13.645613536752787
solver.solver:INFO:compute_error:Time: 0.20000000000000004, RMSPE: 13.470272314104651
solver.solver:INFO:compute_error:Time: 0.3000000000000001, RMSPE: 13.301307791238326
solver.solver:INFO:compute_error:Time: 0.4000000000000002, RMSPE: 13.134443516569828
solver.solver:INFO:compute_error:Time: 0.5000000000000002, RMSPE: 12.968137813935202
solver.solver:INFO:compute_error:Time: 0.6000000000000003, RMSPE: 12.80159641524519
solver.solver:INFO:compute_error:Time: 0.7000000000000004, RMSPE: 12.634327101529577
solver.solver:INFO:compute_error:Time: 0.8000000000000005, RMSPE: 12.465985084275317
solver.solver:INFO:compute_error:Time: 0.9000000000000006, RMSPE: 12.296305788979462
solver.solver:INFO:compute_error:Time: 1.0000000000000007, RMSPE: 12.125071138856113
solver.solver:INFO:compute_error:Time: 1.1000000000000008, RMSPE: 11.952090789187213
solver.solver:INFO:compute_error:Time: 1.2000000000000008, RMSPE: 11.777190776098184
solver.solver:INFO:compute_error:Time: 1.300000000000001, RMSPE: 11.600206132430158
solver.solver:INFO:compute_error:Time: 1.400000000000001, RMSPE: 11.420975743222584
solver.solver:INFO:compute_error:Time: 1.500000000000001, RMSPE: 11.239338507931029
solver.solver:INFO:compute_error:Time: 1.6000000000000012, RMSPE: 11.055130271182499
solver.solver:INFO:compute_error:Time: 1.7000000000000013, RMSPE: 10.86818119095645
solver.solver:INFO:compute_error:Time: 1.8000000000000014, RMSPE: 10.67831332585328
solver.solver:INFO:compute_error:Time: 1.9000000000000015, RMSPE: 10.485338285378564
solver.solver:INFO:compute_error:Time: 2.0000000000000013, RMSPE: 10.289054820673984
solver.solver:INFO:compute_error:Time: 2.099999999999999, RMSPE: 10.089246249341741
solver.solver:INFO:compute_error:Time: 2.199999999999997, RMSPE: 9.885677613909076
solver.solver:INFO:compute_error:Time: 2.299999999999995, RMSPE: 9.678092475139318
solver.solver:INFO:compute_error:Time: 2.399999999999993, RMSPE: 9.46620924719226
solver.solver:INFO:compute_error:Time: 2.4999999999999907, RMSPE: 9.249717005589938
solver.solver:INFO:compute_error:Time: 2.5999999999999885, RMSPE: 9.028270763674836
solver.solver:INFO:compute_error:Time: 2.6999999999999864, RMSPE: 8.801486350765426
solver.solver:INFO:compute_error:Time: 2.7999999999999843, RMSPE: 8.568935272857896
solver.solver:INFO:compute_error:Time: 2.899999999999982, RMSPE: 8.330140325831504
solver.solver:INFO:compute_error:Time: 2.99999999999998, RMSPE: 8.084573268256564
solver.solver:INFO:compute_error:Time: 3.099999999999978, RMSPE: 7.831656505502323
solver.solver:INFO:compute_error:Time: 3.1999999999999758, RMSPE: 7.570771383244345
solver.solver:INFO:compute_error:Time: 3.2999999999999736, RMSPE: 7.301276162372605
solver.solver:INFO:compute_error:Time: 3.3999999999999715, RMSPE: 7.022536824123499
solver.solver:INFO:compute_error:Time: 3.4999999999999694, RMSPE: 6.733973301161832
solver.solver:INFO:compute_error:Time: 3.5999999999999672, RMSPE: 6.435122366863527
solver.solver:INFO:compute_error:Time: 3.699999999999965, RMSPE: 6.125716182684759
solver.solver:INFO:compute_error:Time: 3.799999999999963, RMSPE: 5.805772531313977
solver.solver:INFO:compute_error:Time: 3.899999999999961, RMSPE: 5.475689412149699
solver.solver:INFO:compute_error:Time: 3.9999999999999587, RMSPE: 5.136333536828344
solver.solver:INFO:compute_error:Time: 4.099999999999957, RMSPE: 4.789110084814179
solver.solver:INFO:compute_error:Time: 4.199999999999955, RMSPE: 4.4360006123674305
solver.solver:INFO:compute_error:Time: 4.299999999999953, RMSPE: 4.079557786740321
solver.solver:INFO:compute_error:Time: 4.399999999999951, RMSPE: 3.7228497468717587
solver.solver:INFO:compute_error:Time: 4.4999999999999485, RMSPE: 3.3693529266810276
solver.solver:INFO:compute_error:Time: 4.599999999999946, RMSPE: 3.0227991555600195
solver.solver:INFO:compute_error:Time: 4.699999999999944, RMSPE: 2.686989497032244
solver.solver:INFO:compute_error:Time: 4.799999999999942, RMSPE: 2.365592322527472
solver.solver:INFO:compute_error:Time: 4.89999999999994, RMSPE: 2.0619455814955265
solver.solver:INFO:compute_error:Time: 4.999999999999938, RMSPE: 1.7788827030996535
solver.solver:INFO:compute_error:Time: 5.099999999999936, RMSPE: 1.5185982432065162
solver.solver:INFO:compute_error:Time: 5.199999999999934, RMSPE: 1.2825639917094458
solver.solver:INFO:compute_error:Time: 5.299999999999931, RMSPE: 1.0714998162532563
solver.solver:INFO:compute_error:Time: 5.399999999999929, RMSPE: 0.8853971440434131
solver.solver:INFO:compute_error:Time: 5.499999999999927, RMSPE: 0.7235876200880434
solver.solver:INFO:compute_error:Time: 5.599999999999925, RMSPE: 0.584845762538912
solver.solver:INFO:compute_error:Time: 5.699999999999923, RMSPE: 0.46751262592086645
solver.solver:INFO:compute_error:Time: 5.799999999999921, RMSPE: 0.3696274960638627
solver.solver:INFO:compute_error:Time: 5.899999999999919, RMSPE: 0.28905613080298276
solver.solver:INFO:compute_error:Time: 5.9999999999999165, RMSPE: 0.22360653642738848
solver.solver:INFO:compute_error:Time: 6.099999999999914, RMSPE: 0.17112620748230578
solver.solver:INFO:compute_error:Time: 6.199999999999912, RMSPE: 0.12957769108463363
solver.solver:INFO:compute_error:Time: 6.29999999999991, RMSPE: 0.09709191568654213
solver.solver:INFO:compute_error:Time: 6.399999999999908, RMSPE: 0.0720007347849108
solver.solver:INFO:compute_error:Time: 6.499999999999906, RMSPE: 0.052851495944288986
solver.solver:INFO:compute_error:Time: 6.599999999999904, RMSPE: 0.038407177852313214
solver.solver:INFO:compute_error:Time: 6.699999999999902, RMSPE: 0.02763583768487398
solver.solver:INFO:compute_error:Time: 6.7999999999998995, RMSPE: 0.019692909627384094
solver.solver:INFO:compute_error:Time: 6.899999999999897, RMSPE: 0.013899432763071031
solver.solver:INFO:compute_error:Time: 6.999999999999895, RMSPE: 0.009718689612246298
solver.solver:INFO:solve:steady state reached with an error: 0.009718689612246298 < tolerance: 0.01
solver.solver:INFO:compute_error:Time: 6.999999999999895, RMSPE: 0.009718689612246298
solver.solver:INFO:compute_error:Time: 0.9999999999999999, RMSPE: 13.64445240925252
solver.solver:INFO:compute_error:Time: 2.0000000000000004, RMSPE: 13.469099584467402
solver.solver:INFO:compute_error:Time: 3.0000000000000013, RMSPE: 13.30012516858593
solver.solver:INFO:compute_error:Time: 4.000000000000002, RMSPE: 13.133252151570892
solver.solver:INFO:compute_error:Time: 4.999999999999998, RMSPE: 12.966938669956784
solver.solver:INFO:compute_error:Time: 5.999999999999995, RMSPE: 12.800390370878372
solver.solver:INFO:compute_error:Time: 6.999999999999991, RMSPE: 12.633114992364785
solver.solver:INFO:compute_error:Time: 7.999999999999988, RMSPE: 12.464767723897383
solver.solver:INFO:compute_error:Time: 8.999999999999984, RMSPE: 12.295083981118054
solver.solver:INFO:compute_error:Time: 9.99999999999998, RMSPE: 12.123845685210412
solver.solver:INFO:compute_error:Time: 10.999999999999977, RMSPE: 11.950862494928218
solver.solver:INFO:compute_error:Time: 11.999999999999973, RMSPE: 11.77596045404486
solver.solver:INFO:compute_error:Time: 12.99999999999997, RMSPE: 11.59897460644135
solver.solver:INFO:compute_error:Time: 13.999999999999966, RMSPE: 11.419743851122604
solver.solver:INFO:compute_error:Time: 14.999999999999963, RMSPE: 11.238107104168694
solver.solver:INFO:compute_error:Time: 15.99999999999996, RMSPE: 11.053900229358005
solver.solver:INFO:compute_error:Time: 16.99999999999997, RMSPE: 10.866953406313124
solver.solver:INFO:compute_error:Time: 17.999999999999986, RMSPE: 10.677088717810019
solver.solver:INFO:compute_error:Time: 19.0, RMSPE: 10.484117800167137
solver.solver:INFO:compute_error:Time: 20.000000000000014, RMSPE: 10.28783943414022
solver.solver:INFO:compute_error:Time: 21.00000000000003, RMSPE: 10.088036969969187
solver.solver:INFO:compute_error:Time: 22.000000000000043, RMSPE: 9.884475486127547
solver.solver:INFO:compute_error:Time: 23.000000000000057, RMSPE: 9.67689858298915
solver.solver:INFO:compute_error:Time: 24.00000000000007, RMSPE: 9.465024718429353
solver.solver:INFO:compute_error:Time: 25.000000000000085, RMSPE: 9.248543016339069
solver.solver:INFO:compute_error:Time: 26.0000000000001, RMSPE: 9.027108543770792
solver.solver:INFO:compute_error:Time: 27.000000000000114, RMSPE: 8.800337189963251
solver.solver:INFO:compute_error:Time: 28.000000000000128, RMSPE: 8.567800528138353
solver.solver:INFO:compute_error:Time: 29.000000000000142, RMSPE: 8.329021430058893
solver.solver:INFO:compute_error:Time: 30.000000000000156, RMSPE: 8.08347174043172
solver.solver:INFO:compute_error:Time: 31.00000000000017, RMSPE: 7.8305739627475015
solver.solver:INFO:compute_error:Time: 32.000000000000185, RMSPE: 7.569709554404295
solver.solver:INFO:compute_error:Time: 33.0000000000002, RMSPE: 7.3002369026689795
solver.solver:INFO:compute_error:Time: 34.00000000000021, RMSPE: 7.021522129636969
solver.solver:INFO:compute_error:Time: 35.00000000000023, RMSPE: 6.732985321066646
solver.solver:INFO:compute_error:Time: 36.00000000000024, RMSPE: 6.434163410399789
solver.solver:INFO:compute_error:Time: 37.000000000000256, RMSPE: 6.124788716995379
solver.solver:INFO:compute_error:Time: 38.00000000000027, RMSPE: 5.804879165730872
solver.solver:INFO:compute_error:Time: 39.000000000000284, RMSPE: 5.474832864553198
solver.solver:INFO:compute_error:Time: 40.0000000000003, RMSPE: 5.135516578564015
solver.solver:INFO:compute_error:Time: 41.00000000000031, RMSPE: 4.788335462467194
solver.solver:INFO:compute_error:Time: 42.00000000000033, RMSPE: 4.43527094741592
solver.solver:INFO:compute_error:Time: 43.00000000000034, RMSPE: 4.078875457447744
solver.solver:INFO:compute_error:Time: 44.000000000000355, RMSPE: 3.722216760215198
solver.solver:INFO:compute_error:Time: 45.00000000000037, RMSPE: 3.3687707909846063
solver.solver:INFO:compute_error:Time: 46.000000000000384, RMSPE: 3.022268766154478
solver.solver:INFO:compute_error:Time: 47.0000000000004, RMSPE: 2.686511047219846
solver.solver:INFO:compute_error:Time: 48.00000000000041, RMSPE: 2.3651652502428018
solver.solver:INFO:compute_error:Time: 49.000000000000426, RMSPE: 2.061568558541853
solver.solver:INFO:compute_error:Time: 50.00000000000044, RMSPE: 1.778553669262431
solver.solver:INFO:compute_error:Time: 51.000000000000455, RMSPE: 1.5183144826565154
solver.solver:INFO:compute_error:Time: 52.00000000000047, RMSPE: 1.2823222446925695
solver.solver:INFO:compute_error:Time: 53.00000000000048, RMSPE: 1.0712964157704736
solver.solver:INFO:compute_error:Time: 54.0000000000005, RMSPE: 0.8852281654486732
solver.solver:INFO:compute_error:Time: 55.00000000000051, RMSPE: 0.7234490313727068
solver.solver:INFO:compute_error:Time: 56.000000000000526, RMSPE: 0.5847335643521668
solver.solver:INFO:compute_error:Time: 57.00000000000054, RMSPE: 0.4674229727212244
solver.solver:INFO:compute_error:Time: 58.000000000000554, RMSPE: 0.3695567927322493
solver.solver:INFO:compute_error:Time: 59.00000000000057, RMSPE: 0.2890011020973767
solver.solver:INFO:compute_error:Time: 60.00000000000058, RMSPE: 0.22356426942394875
solver.solver:INFO:compute_error:Time: 61.0000000000006, RMSPE: 0.17109416935331961
solver.solver:INFO:compute_error:Time: 62.00000000000061, RMSPE: 0.1295537260718453
solver.solver:INFO:compute_error:Time: 63.000000000000625, RMSPE: 0.09707422592670427
solver.solver:INFO:compute_error:Time: 64.00000000000064, RMSPE: 0.0719878498148159
solver.solver:INFO:compute_error:Time: 65.00000000000058, RMSPE: 0.052842235395205245
solver.solver:INFO:compute_error:Time: 66.00000000000053, RMSPE: 0.03840061120120869
solver.solver:INFO:compute_error:Time: 67.00000000000047, RMSPE: 0.027631244118209334
solver.solver:INFO:compute_error:Time: 68.00000000000041, RMSPE: 0.019689740223811085
solver.solver:INFO:compute_error:Time: 69.00000000000036, RMSPE: 0.013897276410091704
solver.solver:INFO:compute_error:Time: 70.0000000000003, RMSPE: 0.00971724339908518
solver.solver:INFO:solve:steady state reached with an error: 0.00971724339908518 < tolerance: 0.01
solver.solver:INFO:compute_error:Time: 70.0000000000003, RMSPE: 0.00971724339908518
solver.solver:INFO:compute_error:Time: 10, RMSPE: 13.633015919386501
solver.solver:INFO:compute_error:Time: 20, RMSPE: 13.457549225813523
solver.solver:INFO:compute_error:Time: 30, RMSPE: 13.288477991654482
solver.solver:INFO:compute_error:Time: 40, RMSPE: 13.121519660731193
solver.solver:INFO:compute_error:Time: 50, RMSPE: 12.955130504599508
solver.solver:INFO:compute_error:Time: 60, RMSPE: 12.78851532247648
solver.solver:INFO:compute_error:Time: 70, RMSPE: 12.62118141885782
solver.solver:INFO:compute_error:Time: 80, RMSPE: 12.452783757899105
solver.solver:INFO:compute_error:Time: 90, RMSPE: 12.28305765035675
solver.solver:INFO:compute_error:Time: 100, RMSPE: 12.111784990032682
solver.solver:INFO:compute_error:Time: 110, RMSPE: 11.938775462740635
solver.solver:INFO:compute_error:Time: 120, RMSPE: 11.76385518057618
solver.solver:INFO:compute_error:Time: 130, RMSPE: 11.586859289201065
solver.solver:INFO:compute_error:Time: 140, RMSPE: 11.407626818209009
solver.solver:INFO:compute_error:Time: 150, RMSPE: 11.225996840407216
solver.solver:INFO:compute_error:Time: 160, RMSPE: 11.041805401101248
solver.solver:INFO:compute_error:Time: 170, RMSPE: 10.854882885863763
solver.solver:INFO:compute_error:Time: 180, RMSPE: 10.66505160821583
solver.solver:INFO:compute_error:Time: 190, RMSPE: 10.472123461022088
solver.solver:INFO:compute_error:Time: 200, RMSPE: 10.275897508973525
solver.solver:INFO:compute_error:Time: 210, RMSPE: 10.0761574157996
solver.solver:INFO:compute_error:Time: 220, RMSPE: 9.872668605796951
solver.solver:INFO:compute_error:Time: 230, RMSPE: 9.665175060972128
solver.solver:INFO:compute_error:Time: 240, RMSPE: 9.45339566095633
solver.solver:INFO:compute_error:Time: 250, RMSPE: 9.237019996890286
solver.solver:INFO:compute_error:Time: 260, RMSPE: 9.015703655315251
solver.solver:INFO:compute_error:Time: 270, RMSPE: 8.789063105726724
solver.solver:INFO:compute_error:Time: 280, RMSPE: 8.5566705731243
solver.solver:INFO:compute_error:Time: 290, RMSPE: 8.31804966584683
solver.solver:INFO:compute_error:Time: 300, RMSPE: 8.072673065626349
solver.solver:INFO:compute_error:Time: 310, RMSPE: 7.81996423039077
solver.solver:INFO:compute_error:Time: 320, RMSPE: 7.559305705153145
solver.solver:INFO:compute_error:Time: 330, RMSPE: 7.290057108110368
solver.solver:INFO:compute_error:Time: 340, RMSPE: 7.011585933558215
solver.solver:INFO:compute_error:Time: 350, RMSPE: 6.72331375811898
solver.solver:INFO:compute_error:Time: 360, RMSPE: 6.424779072353787
solver.solver:INFO:compute_error:Time: 370, RMSPE: 6.115715728389248
solver.solver:INFO:compute_error:Time: 380, RMSPE: 5.79614302548102
solver.solver:INFO:compute_error:Time: 390, RMSPE: 5.466460110651127
solver.solver:INFO:compute_error:Time: 400, RMSPE: 5.127534241666366
solver.solver:INFO:compute_error:Time: 410, RMSPE: 4.780770292290539
solver.solver:INFO:compute_error:Time: 420, RMSPE: 4.428148422827026
solver.solver:INFO:compute_error:Time: 430, RMSPE: 4.072218624091789
solver.solver:INFO:compute_error:Time: 440, RMSPE: 3.7160449732853014
solver.solver:INFO:compute_error:Time: 450, RMSPE: 3.3630984687490075
solver.solver:INFO:compute_error:Time: 460, RMSPE: 3.0171042756832245
solver.solver:INFO:compute_error:Time: 470, RMSPE: 2.681855842789871
solver.solver:INFO:compute_error:Time: 480, RMSPE: 2.361013365743629
solver.solver:INFO:compute_error:Time: 490, RMSPE: 2.057906520170582
solver.solver:INFO:compute_error:Time: 500, RMSPE: 1.7753608494482145
solver.solver:INFO:compute_error:Time: 510, RMSPE: 1.5155638679936927
solver.solver:INFO:compute_error:Time: 520, RMSPE: 1.279981547418656
solver.solver:INFO:compute_error:Time: 530, RMSPE: 1.0693294263389688
solver.solver:INFO:compute_error:Time: 540, RMSPE: 0.8835962268368985
solver.solver:INFO:compute_error:Time: 550, RMSPE: 0.7221125148015991
solver.solver:INFO:compute_error:Time: 560, RMSPE: 0.5836532392513178
solver.solver:INFO:compute_error:Time: 570, RMSPE: 0.46656118727902346
solver.solver:INFO:compute_error:Time: 580, RMSPE: 0.36887841051051634
solver.solver:INFO:compute_error:Time: 590, RMSPE: 0.2884741702714781
solver.solver:INFO:compute_error:Time: 600, RMSPE: 0.22316042132995742
solver.solver:INFO:compute_error:Time: 610, RMSPE: 0.17078878551585616
solver.solver:INFO:compute_error:Time: 620, RMSPE: 0.12932589244507706
solver.solver:INFO:compute_error:Time: 630, RMSPE: 0.0969065356295066
solver.solver:INFO:compute_error:Time: 640, RMSPE: 0.07186609602873785
solver.solver:INFO:compute_error:Time: 650, RMSPE: 0.05275503972851375
solver.solver:INFO:compute_error:Time: 660, RMSPE: 0.038339025319358955
solver.solver:INFO:compute_error:Time: 670, RMSPE: 0.027588354342473868
solver.solver:INFO:compute_error:Time: 680, RMSPE: 0.01966029638948726
solver.solver:INFO:compute_error:Time: 690, RMSPE: 0.01387735848982559
solver.solver:INFO:compute_error:Time: 700, RMSPE: 0.009703972812206767
solver.solver:INFO:solve:steady state reached with an error: 0.009703972812206767 < tolerance: 0.01
solver.solver:INFO:compute_error:Time: 700, RMSPE: 0.009703972812206767
solver.solver:INFO:compute_error:Time: 10000, RMSPE: 11.426088617921112
solver.solver:INFO:compute_error:Time: 20000, RMSPE: 11.24661118679813
solver.solver:INFO:compute_error:Time: 30000, RMSPE: 11.081051302779294
solver.solver:INFO:compute_error:Time: 40000, RMSPE: 10.9217180719725
solver.solver:INFO:compute_error:Time: 50000, RMSPE: 10.76578597167098
solver.solver:INFO:compute_error:Time: 60000, RMSPE: 10.611806427481845
solver.solver:INFO:compute_error:Time: 70000, RMSPE: 10.458894481390457
solver.solver:INFO:compute_error:Time: 80000, RMSPE: 10.306444050355838
solver.solver:INFO:compute_error:Time: 90000, RMSPE: 10.154004238198368
solver.solver:INFO:compute_error:Time: 100000, RMSPE: 10.001217431560836
solver.solver:INFO:compute_error:Time: 110000, RMSPE: 9.847784962027749
solver.solver:INFO:compute_error:Time: 120000, RMSPE: 9.69344646788132
solver.solver:INFO:compute_error:Time: 130000, RMSPE: 9.537966631702805
solver.solver:INFO:compute_error:Time: 140000, RMSPE: 9.381126133882148
solver.solver:INFO:compute_error:Time: 150000, RMSPE: 9.222715121339476
solver.solver:INFO:compute_error:Time: 160000, RMSPE: 9.062528215947777
solver.solver:INFO:compute_error:Time: 170000, RMSPE: 8.90036046934216
solver.solver:INFO:compute_error:Time: 180000, RMSPE: 8.736003881457496
solver.solver:INFO:compute_error:Time: 190000, RMSPE: 8.5692442201028
solver.solver:INFO:compute_error:Time: 200000, RMSPE: 8.399857949444769
solver.solver:INFO:compute_error:Time: 210000, RMSPE: 8.227609120590214
solver.solver:INFO:compute_error:Time: 220000, RMSPE: 8.052246115824975
solver.solver:INFO:compute_error:Time: 230000, RMSPE: 7.873498188259335
solver.solver:INFO:compute_error:Time: 240000, RMSPE: 7.691071822838457
solver.solver:INFO:compute_error:Time: 250000, RMSPE: 7.5046470874390705
solver.solver:INFO:compute_error:Time: 260000, RMSPE: 7.313874364872297
solver.solver:INFO:compute_error:Time: 270000, RMSPE: 7.118372164181612
solver.solver:INFO:compute_error:Time: 280000, RMSPE: 6.917727081308448
solver.solver:INFO:compute_error:Time: 290000, RMSPE: 6.711497356668475
solver.solver:INFO:compute_error:Time: 300000, RMSPE: 6.499221764999535
solver.solver:INFO:compute_error:Time: 310000, RMSPE: 6.280435651315621
solver.solver:INFO:compute_error:Time: 320000, RMSPE: 6.054695676980673
solver.solver:INFO:compute_error:Time: 330000, RMSPE: 5.821614175432281
solver.solver:INFO:compute_error:Time: 340000, RMSPE: 5.580902915546183
solver.solver:INFO:compute_error:Time: 350000, RMSPE: 5.332424597930173
solver.solver:INFO:compute_error:Time: 360000, RMSPE: 5.0762487315619875
solver.solver:INFO:compute_error:Time: 370000, RMSPE: 4.812706914956247
solver.solver:INFO:compute_error:Time: 380000, RMSPE: 4.542441300544784
solver.solver:INFO:compute_error:Time: 390000, RMSPE: 4.26643948142415
solver.solver:INFO:compute_error:Time: 400000, RMSPE: 3.9860494599652743
solver.solver:INFO:compute_error:Time: 410000, RMSPE: 3.7029698361822647
solver.solver:INFO:compute_error:Time: 420000, RMSPE: 3.419212778068025
solver.solver:INFO:compute_error:Time: 430000, RMSPE: 3.1370403813351557
solver.solver:INFO:compute_error:Time: 440000, RMSPE: 2.8588782125607333
solver.solver:INFO:compute_error:Time: 450000, RMSPE: 2.587212628122026
solver.solver:INFO:compute_error:Time: 460000, RMSPE: 2.3244804114692292
solver.solver:INFO:compute_error:Time: 470000, RMSPE: 2.072960080750643
solver.solver:INFO:compute_error:Time: 480000, RMSPE: 1.8346738136755005
solver.solver:INFO:compute_error:Time: 490000, RMSPE: 1.6113074568620813
solver.solver:INFO:compute_error:Time: 500000, RMSPE: 1.4041538358622452
solver.solver:INFO:compute_error:Time: 510000, RMSPE: 1.214081948198636
solver.solver:INFO:compute_error:Time: 520000, RMSPE: 1.041531997925261
solver.solver:INFO:compute_error:Time: 530000, RMSPE: 0.8865339466460136
solver.solver:INFO:compute_error:Time: 540000, RMSPE: 0.7487455384439307
solver.solver:INFO:compute_error:Time: 550000, RMSPE: 0.6275047118748296
solver.solver:INFO:compute_error:Time: 560000, RMSPE: 0.5218909383713763
solver.solver:INFO:compute_error:Time: 570000, RMSPE: 0.43079023535070143
solver.solver:INFO:compute_error:Time: 580000, RMSPE: 0.3529592532364449
solver.solver:INFO:compute_error:Time: 590000, RMSPE: 0.28708476655405935
solver.solver:INFO:compute_error:Time: 600000, RMSPE: 0.23183595374225074
solver.solver:INFO:compute_error:Time: 610000, RMSPE: 0.18590789592009793
solver.solver:INFO:compute_error:Time: 620000, RMSPE: 0.14805566331710235
solver.solver:INFO:compute_error:Time: 630000, RMSPE: 0.11711912798274136
solver.solver:INFO:compute_error:Time: 640000, RMSPE: 0.09203921515785465
solver.solver:INFO:compute_error:Time: 650000, RMSPE: 0.07186668315355652
solver.solver:INFO:compute_error:Time: 660000, RMSPE: 0.05576472210649166
solver.solver:INFO:compute_error:Time: 670000, RMSPE: 0.04300671658610116
solver.solver:INFO:compute_error:Time: 680000, RMSPE: 0.032970461607737346
solver.solver:INFO:compute_error:Time: 690000, RMSPE: 0.025129991688562964
solver.solver:INFO:compute_error:Time: 700000, RMSPE: 0.019046009844810047
solver.solver:INFO:compute_error:Time: 710000, RMSPE: 0.01435571373950976
solver.solver:INFO:compute_error:Time: 720000, RMSPE: 0.010762628941287896
solver.solver:INFO:compute_error:Time: 730000, RMSPE: 0.00802688759571237
solver.solver:INFO:solve:steady state reached with an error: 0.00802688759571237 < tolerance: 0.01
solver.solver:INFO:compute_error:Time: 730000, RMSPE: 0.00802688759571237
solver.solver:INFO:compute_error:Time: 100000, RMSPE: 6.085084930637109
solver.solver:INFO:compute_error:Time: 200000, RMSPE: 5.559442332640381
solver.solver:INFO:compute_error:Time: 300000, RMSPE: 5.145004604309843
solver.solver:INFO:compute_error:Time: 400000, RMSPE: 4.796527509690557
solver.solver:INFO:compute_error:Time: 500000, RMSPE: 4.494491827479678
solver.solver:INFO:compute_error:Time: 600000, RMSPE: 4.228241011953225
solver.solver:INFO:compute_error:Time: 700000, RMSPE: 3.9912136335948323
solver.solver:INFO:compute_error:Time: 800000, RMSPE: 3.779003382003119
solver.solver:INFO:compute_error:Time: 900000, RMSPE: 3.5884124189293707
solver.solver:INFO:compute_error:Time: 1000000, RMSPE: 3.4169418899087427
solver.solver:INFO:compute_error:Time: 1100000, RMSPE: 3.262502437481071
solver.solver:INFO:compute_error:Time: 1200000, RMSPE: 3.123245239352002
solver.solver:INFO:compute_error:Time: 1300000, RMSPE: 2.9974630374597537
solver.solver:INFO:compute_error:Time: 1400000, RMSPE: 2.8835335452114705
solver.solver:INFO:compute_error:Time: 1500000, RMSPE: 2.7798893225273544
solver.solver:INFO:compute_error:Time: 1600000, RMSPE: 2.6850046841275415
solver.solver:INFO:compute_error:Time: 1700000, RMSPE: 2.5973940712903207
solver.solver:INFO:compute_error:Time: 1800000, RMSPE: 2.5156186916241836
solver.solver:INFO:compute_error:Time: 1900000, RMSPE: 2.4382995664012475
solver.solver:INFO:compute_error:Time: 2000000, RMSPE: 2.3641356423293547
solver.solver:INFO:compute_error:Time: 2100000, RMSPE: 2.2919255412741095
solver.solver:INFO:compute_error:Time: 2200000, RMSPE: 2.220591115115256
solver.solver:INFO:compute_error:Time: 2300000, RMSPE: 2.149200543577255
solver.solver:INFO:compute_error:Time: 2400000, RMSPE: 2.076988506533396
solver.solver:INFO:compute_error:Time: 2500000, RMSPE: 2.0033711120409015
solver.solver:INFO:compute_error:Time: 2600000, RMSPE: 1.927953771745791
solver.solver:INFO:compute_error:Time: 2700000, RMSPE: 1.8505309880132015
solver.solver:INFO:compute_error:Time: 2800000, RMSPE: 1.7710778998950873
solver.solver:INFO:compute_error:Time: 2900000, RMSPE: 1.6897342721627338
solver.solver:INFO:compute_error:Time: 3000000, RMSPE: 1.6067822814304238
solver.solver:INFO:compute_error:Time: 3100000, RMSPE: 1.522619886440108
solver.solver:INFO:compute_error:Time: 3200000, RMSPE: 1.4377317494370787
solver.solver:INFO:compute_error:Time: 3300000, RMSPE: 1.3526596279580285
solver.solver:INFO:compute_error:Time: 3400000, RMSPE: 1.2679739332218753
solver.solver:INFO:compute_error:Time: 3500000, RMSPE: 1.1842478151302211
solver.solver:INFO:compute_error:Time: 3600000, RMSPE: 1.1020347452465162
solver.solver:INFO:compute_error:Time: 3700000, RMSPE: 1.0218501788081127
solver.solver:INFO:compute_error:Time: 3800000, RMSPE: 0.9441575220484829
solver.solver:INFO:compute_error:Time: 3900000, RMSPE: 0.869358335036383
solver.solver:INFO:compute_error:Time: 4000000, RMSPE: 0.7977864736153988
solver.solver:INFO:compute_error:Time: 4100000, RMSPE: 0.729705717848718
solver.solver:INFO:compute_error:Time: 4200000, RMSPE: 0.6653103428589258
solver.solver:INFO:compute_error:Time: 4300000, RMSPE: 0.6047280512786164
solver.solver:INFO:compute_error:Time: 4400000, RMSPE: 0.5480246930746309
solver.solver:INFO:compute_error:Time: 4500000, RMSPE: 0.49521023652083257
solver.solver:INFO:compute_error:Time: 4600000, RMSPE: 0.44624551277908536
solver.solver:INFO:compute_error:Time: 4700000, RMSPE: 0.40104932670384874
solver.solver:INFO:compute_error:Time: 4800000, RMSPE: 0.3595056007608249
solver.solver:INFO:compute_error:Time: 4900000, RMSPE: 0.321470291845213
solver.solver:INFO:compute_error:Time: 5000000, RMSPE: 0.28677788849200786
solver.solver:INFO:compute_error:Time: 5100000, RMSPE: 0.25524735612268185
solver.solver:INFO:compute_error:Time: 5200000, RMSPE: 0.2266874493613847
solver.solver:INFO:compute_error:Time: 5300000, RMSPE: 0.20090135275063264
solver.solver:INFO:compute_error:Time: 5400000, RMSPE: 0.17769064470016024
solver.solver:INFO:compute_error:Time: 5500000, RMSPE: 0.156858604923932
solver.solver:INFO:compute_error:Time: 5600000, RMSPE: 0.13821290391068008
solver.solver:INFO:compute_error:Time: 5700000, RMSPE: 0.121567725191177
solver.solver:INFO:compute_error:Time: 5800000, RMSPE: 0.10674537838152436
solver.solver:INFO:compute_error:Time: 5900000, RMSPE: 0.09357746421261424
solver.solver:INFO:compute_error:Time: 6000000, RMSPE: 0.08190565292463882
solver.solver:INFO:compute_error:Time: 6100000, RMSPE: 0.07158213531837211
solver.solver:INFO:compute_error:Time: 6200000, RMSPE: 0.06246980209562683
solver.solver:INFO:compute_error:Time: 6300000, RMSPE: 0.05444220245072526
solver.solver:INFO:compute_error:Time: 6400000, RMSPE: 0.04738332764149259
solver.solver:INFO:compute_error:Time: 6500000, RMSPE: 0.04118725981853924
solver.solver:INFO:compute_error:Time: 6600000, RMSPE: 0.035757720984113436
solver.solver:INFO:compute_error:Time: 6700000, RMSPE: 0.031007551771242987
solver.solver:INFO:compute_error:Time: 6800000, RMSPE: 0.026858144904642892
solver.solver:INFO:compute_error:Time: 6900000, RMSPE: 0.023238853802451203
solver.solver:INFO:compute_error:Time: 7000000, RMSPE: 0.02008639284107889
solver.solver:INFO:compute_error:Time: 7100000, RMSPE: 0.01734424234431893
solver.solver:INFO:compute_error:Time: 7200000, RMSPE: 0.014962068362257884
solver.solver:INFO:compute_error:Time: 7300000, RMSPE: 0.01289516475130348
solver.solver:INFO:compute_error:Time: 7400000, RMSPE: 0.011103922920288471
solver.solver:INFO:compute_error:Time: 7500000, RMSPE: 0.009553332830667111
solver.solver:INFO:solve:steady state reached with an error: 0.009553332830667111 < tolerance: 0.01
solver.solver:INFO:compute_error:Time: 7500000, RMSPE: 0.009553332830667111
#+end_example


#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results none :exports none :session Python-Session :tangle "../../../../src/solver/code_project/main.py
  def main():
      SteadyState()
      Generation()
      Transient()
      AdvectionDiffusion()

  if __name__ == "__main__":
      main()
#+END_SRC


** Fast Velocity
When a velocity of 1m/s is used, the problem is convective driven, with the 50 degree wave propegating across from left two right. The diffusion of the wave is likely due to numerical error an not due to actual diffusion. Note how the diffusion of temperature from the top and bottom boundaries has very little impact on the temperature profiles.
[[./examples/advection_diffusion_project/advection_diffusion_fast_temperature_profile.png]]
[[./examples/advection_diffusion_project/advection_diffusion_fast_line_distributions.png]]

** Medium Velocity
Slowing the velocity down to 0.1 m/s has very little change (beyond the time from which it takes the front to move from left to right). At this velocity this profile remains advection dominated.
[[./examples/advection_diffusion_project/advection_diffusion_med_temperature_profile.png]]
[[./examples/advection_diffusion_project/advection_diffusion_med_line_distributions.png]]
** Slow Velocity
Again, even at a velocity of 0.01 m/s the problem is still advection dominated. This aligns with the transient results which obtained steady state in ~10^6 seconds, while the advection can transefer the temperature across the domain in ~10^3
[[./examples/advection_diffusion_project/advection_diffusion_slow_temperature_profile.png]]
[[./examples/advection_diffusion_project/advection_diffusion_slow_line_distributions.png]]

** Mixed Advection diffusion
Slowwing the velocity down the velocity an additional 3 orders of magnitude, the diffusive effects start to influence the solution, with the bottom temperature profile starting to diverge from the middle and top profile
[[./examples/advection_diffusion_project/advection_diffusion_mixed_temperature_profile.png]]
[[./examples/advection_diffusion_project/advection_diffusion_mixed_line_distributions.png]]

** Diffusion Driven
Further slowwing down the velocity to 0.000001 m/s the flow becomes diffusion driven, with very little convective influence.
[[./examples/advection_diffusion_project/advection_diffusion_ultra_slow_temperature_profile.png]]
[[./examples/advection_diffusion_project/advection_diffusion_ultra_slow_line_distributions.png]]

* Theory
** Integral Equation

This example considers the 2 dimensional advection diffusion equation, which in its integral form can be written as

$$
\frac{d}{dt} \int _\Omega \phi  d\Omega = - \int _S \phi \textbf{V} \cdot \textbf{n} dS  \int _S \alpha \nabla \phi \cdot \textbf{n} dS + \int _\Omega Q d\Omega
$$

** Discritized Equations
The first term of the integral equation can be  discritized on a cartesian structured grid by approximating the volumetric inegral's average as being its center point and discritizing the time derivative using a forward discritization.

$$
\frac{d}{d t} \int _\Omega  \phi d\Omega = \frac{d}{d t} \bar{\phi}\Delta x \Delta y \approx \frac{d}{d t} \phi _i\Delta x \Delta y \approx \frac{\phi^{n+1} _i - \phi ^ n _i}{\Delta t} \Delta x \Delta y + O(\Delta t)$
$$

Due to the velocitys all being in the positive x direction, the second term can be discritized using an upwind discritization.

$$
 -\int _S \phi \textbf{V} \cdot \textbf{n} dS   \approx u_x(\phi_L - \phi _i) \Delta y +O(\Delta x , \Delta t)
$$

where u_x is the velocity magnitude in the x direction and $\phi _W$ coresponds to value of phi for the cell next to the current cell in the the west cardinal dircetion. Of note, the $\Delta x$ discritization here will make the entire equation 1st order accurate spatial discritization. Note: The convection of refering to the cells surrounding the current cell as N = North, E = East, W = West, S = South
and the lowercase equivalent refering to the respective face intersections between will be used throuhout this report)

the third diffusive flux term can be discritized using the central difference. Assuming a constant diffusivity paramater this results in

$$
 \int _S \alpha \nabla \phi \cdot \textbf{n} dS \approx \alpha \frac{\phi _L -2 \phi _i +\phi _R}{\Delta x} \Delta y + \alpha \frac{\phi _S -2 \phi _i +\phi _N}{\Delta y} \Delta x + O(\Delta x^2 ,\Delta y^2)
$$

The last source term can again be approximated as the value at its mid point

$$
\int _\Omega Q d\Omega \approx Q_i\Delta x \Delta y
$$

Combining the equations discritized equations and deviding both sided by $\Delta x \Delta y$ and multipying the source term (given in units of $\frac{W}{m^2}$) by $\frac{\alpha}{k}$ results in the final discritized equation

$$
\frac{\phi^{n+1} _i - \phi ^ n _i}{\Delta t} = \frac{u_x(\phi_L - \phi _i)}{\Delta x} + \alpha \frac{\phi _L -2 \phi _i +\phi _R}{\Delta x ^2} + \alpha \frac{\phi _S -2 \phi _i +\phi _N}{\Delta y^2} + \ Q_i \frac{\alpha}{k} +O(\Delta t, \Delta x, \Delta y)
$$

Finally, the source term was given in

** Boundary Conditions
For the boundary conditions, we can modify the equation on the boundaries using the ghost cell approach using the known quantities. Shown here for the left dirichlet boundaries

$$
\frac{\phi _L+ \phi _i}{2} = T_{left}
$$

allows solving for the dirichlet equations on the boundaries

$$
\phi _L = 2T_{left}-\phi _i
$$

Simillarly for the right

$$
\phi _R = 2T_{right}-\phi _i
$$

and bottom boundaries

$$
\phi _S = 2T_{bottom}-\phi _i
$$

The neumann boundary can be determined from the flux term

$$
q = k \frac{\delta T}{\delta y} \approx k \frac{\phi _N - \phi _i}{\Delta y}
$$

where k is the materials thermal conductivity.
Solving for $\phi _n$

$$
\phi _N = \frac{q \Delta y}{k} +\phi _i
$$

* Problem Constants
Based on the problem description, at atmospheric pressure the thermal diffusivity ranges from $0.155 *10^{-6} \frac{m^2}{s}$ at 50 degrees celcius, to $0.143 * 10^ {-6} \frac{m^2}{s}$ at 20 degrees celsius. A constant thermal diffusivity of $0.146 * 10^{-6} /frac{m^2}{s}$ for water at standard temperature and pressure (25 degrees celcius at atmospheric pressure) was used for this project as the error introduced due to this symplifying assumption was determined to be acceptable [cite:@Water_Diffusion_EngineeringToolbox]

The water thermal conductivity taken to be a constant at $0.456 \frac{W}{mK}$ again coresponding to a temperature of 25 degrees celcius. [cite:@Water_Conductivity_EngineeringToolBox]

#+ATTR_LATEX: :options frame=single
#+BEGIN_SRC python :results output :exports both :session Python-Session :tangle "../../../../src/solver/code_project/main.py
  from solver.cartesian_mesh import CartesianMesh
  from solver.solver import Solver
  from solver.utilities import EnergyBalance, Plotter, VelocityRounder
  from solver.mesher import linear_convection_mesh
  from matplotlib import pyplot as plt
  import numpy as np
  import logging
  import math

  #create logging configuration
  logger = logging.getLogger(__name__)
  logger.setLevel(logging.INFO)

  console_handler = logging.StreamHandler()
  console_handler.setLevel(logging.INFO)
  formatter = logging.Formatter(
    "%(message)s",
  )
  console_handler.setFormatter(formatter)
  logger.addHandler(console_handler)

  class Setup:
      def __init__(self,
                   x_range = (0,5),
                   y_range = (0,1),
                   mesh_type = "finite_volume",
                   conductivity = 0.456,
                   diffusivity = 0.146*10**(-6),
                   temp_left = 30,
                   temp_right = 30,
                   temp_bottom = 30,
                   top_flux = -10,
                   ):


          self.mesh_size_dict = {
              "course":(5,2),
              "medium": (20,8),
              "fine":(100,10),
              "ultra_fine":(200,50)
          }
          # Define Problem constants
          self.x_range = x_range
          self.y_range = y_range
          self.mesh_type = mesh_type
          self.conductivity = conductivity # W/mk
          self.diffusivity = diffusivity #m^2/s
          self.temp_left = temp_left #celcius
          self.temp_right = temp_right #celcius
          self.temp_bottom = temp_bottom #celcius
          self.top_flux = top_flux #celcius

          # Create a function that creates the mesh
      def create_mesh(
              self,
              x_cells = 80,
              y_cells = 12,

      ):
          mesh = CartesianMesh(
              dimensions=2,
              n_cells=[x_cells, y_cells],
              cordinates=[self.x_range, self.y_range],
          mesh_type= self.mesh_type,
          conductivity = self.conductivity,
          diffusivity = self.diffusivity
      )

          mesh.set_dirichlet_boundary(side="left", phi=self.temp_left)
          mesh.set_dirichlet_boundary(side="right", phi=self.temp_right)
          mesh.set_dirichlet_boundary(side="bottom", phi=self.temp_bottom)
          mesh.set_neumann_boundary(side="top", flux = self.top_flux/self.conductivity)
          return(mesh)

      def plot_steady(self, mesh_dictionary, plot_name):
            fig, ax = plt.subplots(len(mesh_dictionary), figsize= (10,12))
            i = 0
            for  mesh_size, mesh in mesh_dictionary.items():

                x_cords = mesh.grid["x_grid"].cell_cordinates
                y_cords = mesh.grid["y_grid"].cell_cordinates
                logger.debug(x_cords)
                xv, yv = np.meshgrid(x_cords, y_cords)
                axis = plt.subplot(len(mesh_dictionary),1,i+1)
                axis.set_title(mesh_size)
                steady = axis.pcolormesh(xv, yv, mesh.phi.get_phi())

                i = i +1

                fig.colorbar(steady, label = "temperature (celcius)")
            plt.savefig(plot_name)
 #+END_SRC

 #+RESULTS:

* Acknowledgments

This work was produced using my best attemps at following the object oriented approach discussed and recomended in Scientific Software Design The Object-Oriented Way by Damian Rouson, Jim Xia, and Xiaofeng Xu. [cite:@SCISoftwareDesign]

Additionally, the approach utilized was influenced by my own previous notes from MD362 Numerical analysis taught by Dr John M Neuberger.

Finaly when preparing this assignment,  ChatGPT was utilized as a reasource to assist with code syntax and as well as a tool for debugging and idea generation. A common use pattern was when a particular pice of code was not generating the desired output it was coppied into chat gpt with a request to do the desired output. The response was reviewed, and tested (both using unit testing as well as interactivly) to see if the desired behavior was obtained. Alternativly key words in the response were sometimes to assist in formulating a more targeted google search.


Chat GPT is a "Natural Language Processer" which at its core is a mathmatical model that calculates the probability of a given response $\textbf{Y} = f(\textbf{X})$ and then selecting the responce with the highest probability. Machine learning models are trained to fit a generalized non-linear model by taking the input paramaters and multiplying them by a weight function (i.e x1 * w1 = b1). In the case of a deep nural network the response of the first equation will be acted on my a non linear operator (i.e. b1 = b1 if b1>0, else 0) and then multiplied by another weight function. This can be repeated multiple times in varying configurations until the response was predicted.

To train the model a gradient decent method is often utilized, where a training data with known responses is used to fit the weight paramaters. The model starts with random weights, predicts the response and compairs each result with the actual response utilizing a loss function (such as mean squared error) The loss is minimized by using gradient decent in which the weigths are updated by taking a step in the direction of steepest decent.

Because Chat GPT is predicting the next most posible phrase, it can result in responses that sound confident, but are not correct. Each line of code was tested Note: The information in this description was developed from my own notes from CS499 Deep Learning taught by Dr. Toby Hocking

* References
#+CITE_EXPORT: csl ~/masters/ieee.csl
#+print_bibliography:
